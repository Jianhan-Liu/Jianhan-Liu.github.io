<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线性回归模型的Python实现</title>
      <link href="/2019/07/15/%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B%E7%9A%84Python%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/07/15/%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B%E7%9A%84Python%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-随机性选择-theta-0-和-theta-1"><a href="#1-随机性选择-theta-0-和-theta-1" class="headerlink" title="1.随机性选择$\theta_0$和$\theta_1$"></a>1.随机性选择$\theta_0$和$\theta_1$</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"></span><br><span class="line">data = load_boston()</span><br><span class="line">X = data[<span class="string">'data'</span>][:, <span class="number">5</span>]</span><br><span class="line">y = data[<span class="string">'target'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">price</span><span class="params">(theta_0, theta_1, x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> theta_0 * x + theta_1</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(y:list, y_hat:list)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> sum((y_i - y_hat_i)**<span class="number">2</span> <span class="keyword">for</span> y_i, y_hat_i <span class="keyword">in</span> zip(list(y), list(y_hat))) / len(list(y))</span><br><span class="line">    </span><br><span class="line">min_loss = float(<span class="string">'inf'</span>)</span><br><span class="line">theta_0, theta_1 = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">attempt_times = <span class="number">3000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(attempt_times):</span><br><span class="line">    theta_0 = random.random() * <span class="number">200</span> - <span class="number">100</span> </span><br><span class="line">    theta_1 = random.random() * <span class="number">200</span> - <span class="number">100</span></span><br><span class="line">    price_by_random_k_and_b = [price(theta_0, theta_1, x) <span class="keyword">for</span> x <span class="keyword">in</span> X]</span><br><span class="line"></span><br><span class="line">    current_loss = loss(y, price_by_random_k_and_b)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> current_loss &lt; min_loss:</span><br><span class="line">        min_loss = current_loss</span><br><span class="line">        new_theta_0, new_theta_1 = theta_0, theta_1</span><br><span class="line">        print(<span class="string">'When time is : &#123;&#125;, get best_k: &#123;&#125; best_b: &#123;&#125;, and the loss is: &#123;&#125;'</span>.format(i, new_theta_0, new_theta_1, min_loss))</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-监督式方向调整选择-theta-0-和-theta-1"><a href="#2-监督式方向调整选择-theta-0-和-theta-1" class="headerlink" title="2.监督式方向调整选择$\theta_0$和$\theta_1$"></a>2.监督式方向调整选择$\theta_0$和$\theta_1$</h3><h3 id="3-梯度下降选择-theta-0-和-theta-1"><a href="#3-梯度下降选择-theta-0-和-theta-1" class="headerlink" title="3.梯度下降选择$\theta_0$和$\theta_1$"></a>3.梯度下降选择$\theta_0$和$\theta_1$</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>北京地铁智能搜索系统的Python实现</title>
      <link href="/2019/07/14/%E5%8C%97%E4%BA%AC%E5%9C%B0%E9%93%81%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/07/14/%E5%8C%97%E4%BA%AC%E5%9C%B0%E9%93%81%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-获取地铁站点线路信息整理得到目标格式数据"><a href="#1-获取地铁站点线路信息整理得到目标格式数据" class="headerlink" title="1.获取地铁站点线路信息整理得到目标格式数据"></a>1.获取地铁站点线路信息整理得到目标格式数据</h2><blockquote><p>根据经纬度计算直线地理距离，此处<code>station_nodes_dict</code>为{station: [lat, lng], …}格式存储所有站点信息的字典。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geo_distance</span><span class="params">(origin:str, destination:str)</span>:</span></span><br><span class="line">    origin = station_nodes_dict[origin]</span><br><span class="line">    destination = station_nodes_dict[destination]</span><br><span class="line">    lat1, lon1 = origin</span><br><span class="line">    lat2, lon2 = destination</span><br><span class="line">    radius = <span class="number">6371</span>  <span class="comment"># km</span></span><br><span class="line"></span><br><span class="line">    dlat = math.radians(lat2 - lat1)</span><br><span class="line">    dlon = math.radians(lon2 - lon1)</span><br><span class="line">    a = (math.sin(dlat / <span class="number">2</span>) * math.sin(dlat / <span class="number">2</span>) +</span><br><span class="line">         math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) *</span><br><span class="line">         math.sin(dlon / <span class="number">2</span>) * math.sin(dlon / <span class="number">2</span>))</span><br><span class="line">    c = <span class="number">2</span> * math.atan2(math.sqrt(a), math.sqrt(<span class="number">1</span> - a))</span><br><span class="line">    distance = radius * c</span><br><span class="line">    <span class="keyword">return</span> distance</span><br></pre></td></tr></table></figure><a id="more"></a>   <blockquote><ul><li>从网页爬取地铁站信息，整理后最终得到{metro_line: {station:(lat, lng), …}, …}双层字典结构的地铁站信息。</li><li>关于使用地图API的选择，可选百度，高德和谷歌，百度的精准度差，谷歌需要科学上网实现，精确度未进行确认，应该不错，折中选择高德地图，若干站点的经纬度需要获取后手动调整。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> .api <span class="keyword">import</span> gaode_api</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://dt.8684.cn/bj'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_metro_map</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return &#123;metro_line_1: &#123;station, ....&#125;, ...&#125;</span></span><br><span class="line"><span class="string">    :param url: metro web page url</span></span><br><span class="line"><span class="string">    :return: &#123;str: &#123;str,...&#125;, ....&#125;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    metro_map = &#123;&#125;</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    response.encoding = <span class="string">'utf-8'</span></span><br><span class="line">    soup_content = BeautifulSoup(response.text, features=<span class="string">"lxml"</span>)</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> soup_content.find_all(class_=<span class="string">'sLink'</span>):</span><br><span class="line">        temp = link.text.split()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'未开通'</span> <span class="keyword">in</span> temp[<span class="number">0</span>] <span class="keyword">or</span> <span class="string">'S2'</span> <span class="keyword">in</span> temp[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'外环'</span> <span class="keyword">in</span> temp[<span class="number">0</span>]:</span><br><span class="line">            temp[<span class="number">0</span>] = temp[<span class="number">0</span>].split(<span class="string">'线'</span>)[<span class="number">0</span>] + <span class="string">'线'</span></span><br><span class="line">        metro_map[temp[<span class="number">0</span>]] = temp[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> metro_map</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_geoinfo_gaode</span><span class="params">(address)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return the latitude and longitude of address.</span></span><br><span class="line"><span class="string">    :param address: str</span></span><br><span class="line"><span class="string">    :return: float(latitude), float(longitude)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    output_type = json</span><br><span class="line">    uri = <span class="string">f"https://restapi.amap.com/v3/geocode/geo?address=<span class="subst">&#123;address&#125;</span>&amp;output=<span class="subst">&#123;output_type&#125;</span>&amp;key=<span class="subst">&#123;gaode_api&#125;</span>"</span></span><br><span class="line">    r = requests.get(uri).text</span><br><span class="line">    result = json.loads(r)[<span class="string">'geocodes'</span>][<span class="number">0</span>][<span class="string">'location'</span>]</span><br><span class="line">    lng, lat = result.split(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">return</span> float(lat), float(lng)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_single_line_geoinfo</span><span class="params">(metro_line, stations)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return dictionary with format of &#123;metro_line_1: (lat, lng),...)&#125;</span></span><br><span class="line"><span class="string">    :param metro_line: str</span></span><br><span class="line"><span class="string">    :param stations: dict </span></span><br><span class="line"><span class="string">    :return: dict</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    metro_geoinfo = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> station <span class="keyword">in</span> stations:</span><br><span class="line">        metro_geoinfo[station] = get_geoinfo_gaode(metro_line + station + <span class="string">'地铁站'</span>)</span><br><span class="line">    <span class="keyword">return</span> metro_geoinfo    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip_station</span><span class="params">(metro_line)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return a list of previous station and next station combined. [(a, b), (b, c), ...]</span></span><br><span class="line"><span class="string">    :param metro_line: str</span></span><br><span class="line"><span class="string">    :return: list</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    station1 = list(metro_line.keys())</span><br><span class="line">    station2 = list(metro_line.keys())</span><br><span class="line">    station2.pop(<span class="number">0</span>)</span><br><span class="line">    result = list(zip(station1, station2))</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><blockquote><p><code>googlemaps</code>用法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> googlemaps </span><br><span class="line">g_maps = googlemaps.Client(key=<span class="string">'yourkey'</span>)</span><br><span class="line">g_maps.geocode(<span class="string">'西红门，地铁站，北京，中国'</span>)[<span class="number">0</span>][<span class="string">'geometry'</span>][<span class="string">'location'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'lat'</span>: <span class="number">39.7898</span>, <span class="string">'lng'</span>: <span class="number">116.328689</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="2-数据整理与可视化"><a href="#2-数据整理与可视化" class="headerlink" title="2.数据整理与可视化"></a>2.数据整理与可视化</h2><blockquote><p>将获取的目标格式数据写入文件，方便手动修改不准确的站点位置以及重复使用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'Beijing_metro_geoinfo_calibrated.json'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    metro_map = json.load(f)</span><br></pre></td></tr></table></figure><blockquote><ul><li>画出整体图形，根据图形效果进行局部偏移较大站点经纬度的调整，将这些站点的api返回经纬度同实际经纬度进行比较校准。</li><li>用到的几个<code>networkx</code>的几个<code>api</code>：<code>addedge(), add_nodes_from(), add_edges_from(), add_cycle()</code>以及后面用到的<code>add_weighted_edges_from()</code>。</li><li><code>METRO = nx.Graph()</code>的几个实例方法：<code>METRO.neighbor()</code>查看某节点的相邻节点；<code>METRO.degree()</code>查看图中所有节点的度。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> plt</span><br><span class="line">METRO = nx.Graph()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放所有站点经纬度的信息</span></span><br><span class="line">station_nodes_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> metro, stations <span class="keyword">in</span> metro_map.items():</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> stations.items():</span><br><span class="line">        station_nodes_dict[k] = v</span><br><span class="line">    <span class="keyword">if</span> metro == <span class="string">'北京地铁2号线'</span>:</span><br><span class="line">        METRO.add_cycle(stations.keys())</span><br><span class="line">    <span class="keyword">elif</span> metro == <span class="string">'北京地铁10号线'</span>:</span><br><span class="line">        METRO.add_cycle(stations.keys())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        METRO.add_edges_from(zip_station(metro_map[metro]))</span><br><span class="line">    METRO.add_nodes_from(stations.keys()) </span><br><span class="line">    </span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">20</span>))</span><br><span class="line"><span class="comment"># 调整画布大小查看奇异站点</span></span><br><span class="line">METRO.add_edge(<span class="string">'阎村东'</span>, <span class="string">'苏庄'</span>)</span><br><span class="line">nx.draw(METRO, station_nodes_dict, with_labels = <span class="literal">False</span>, node_size=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="3-搜索策略：最少换乘，最少站数，最少距离"><a href="#3-搜索策略：最少换乘，最少站数，最少距离" class="headerlink" title="3.搜索策略：最少换乘，最少站数，最少距离"></a>3.搜索策略：最少换乘，最少站数，最少距离</h2><blockquote><ul><li>三种策略实现。</li><li><code>transfer_list</code>列表存储所有换乘站点。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">transfer_list_temp = [x <span class="keyword">for</span> x <span class="keyword">in</span> METRO.degree() <span class="keyword">if</span> x[<span class="number">1</span>] &gt; <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> transfer_list_temp:</span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">0</span>] <span class="keyword">in</span> (<span class="string">'苹果园'</span>, <span class="string">'大红门'</span>):</span><br><span class="line">        transfer_list_temp.remove(x)</span><br><span class="line">transfer_list = [x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> transfer_list_temp]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">least_transfer_first</span><span class="params">(paths:list)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_transfer_number</span><span class="params">(path:list)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(set(path) &amp; set(transfer_list))</span><br><span class="line">    <span class="keyword">return</span> sorted(paths, key=get_transfer_number)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">least_station_first</span><span class="params">(paths)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> sorted(paths, key=len)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">least_distance_first</span><span class="params">(paths)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> len(paths) &lt;= <span class="number">1</span>: <span class="keyword">return</span> paths</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_path_distance</span><span class="params">(path)</span>:</span></span><br><span class="line">        distance = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(path)):</span><br><span class="line">            distance += geo_distance(path[i<span class="number">-1</span>], path[i])</span><br><span class="line">        <span class="keyword">return</span> distance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sorted(paths, key=get_path_distance)</span><br></pre></td></tr></table></figure><blockquote><p>广度搜索实现，默认最短路径策略搜索。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(start, destination, METRO_GRAPH, sort_candidate=least_distance_first)</span>:</span></span><br><span class="line">    target_list = []</span><br><span class="line">    </span><br><span class="line">    paths = [[start]]</span><br><span class="line">    visited = set()</span><br><span class="line">    <span class="keyword">while</span> paths: </span><br><span class="line">        path = paths.pop(<span class="number">0</span>)</span><br><span class="line">        frontier = path[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> frontier <span class="keyword">in</span> visited: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> city <span class="keyword">in</span> METRO_GRAPH.neighbors(frontier):</span><br><span class="line">            <span class="keyword">if</span> city <span class="keyword">in</span> path: <span class="keyword">continue</span>  </span><br><span class="line">            new_path = path + [city]</span><br><span class="line">            paths.append(new_path)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> city == destination: </span><br><span class="line">                target_list.append(new_path)</span><br><span class="line">                paths.pop()</span><br><span class="line"></span><br><span class="line">        visited.add(frontier)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> target_list:</span><br><span class="line">        target_list = sort_candidate(target_list)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">' -&gt; '</span>.join(target_list)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"No way from <span class="subst">&#123;start&#125;</span> to <span class="subst">&#123;destination&#125;</span>."</span></span><br></pre></td></tr></table></figure><blockquote><p>测试。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>search(<span class="string">'大红门'</span>, <span class="string">'广渠门外'</span>, METRO, least_station_first)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'大红门 -&gt; 石榴庄 -&gt; 宋家庄 -&gt; 刘家窑 -&gt; 蒲黄榆 -&gt; 天坛东门 -&gt; 磁器口 -&gt; 广渠门内 -&gt; 广渠门外'</span></span><br></pre></td></tr></table></figure><h2 id="4-增加经过站点的搜索实现"><a href="#4-增加经过站点的搜索实现" class="headerlink" title="4.增加经过站点的搜索实现"></a>4.增加经过站点的搜索实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_go_by</span><span class="params">(start, go_by:list, destination, METRO_GRAPH, sort_candidate=least_station_first)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(go_by, list):</span><br><span class="line">        destination_list = go_by + [destination]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        destination_list = [go_by] + [destination]</span><br><span class="line">        </span><br><span class="line">    result_solution = []</span><br><span class="line">    <span class="keyword">while</span> destination_list:</span><br><span class="line">        temp_destination = destination_list.pop(<span class="number">0</span>)</span><br><span class="line">        temp_result = search(start, temp_destination, METRO_GRAPH, sort_candidate)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> temp_result.startswith(<span class="string">'N'</span>):</span><br><span class="line">            result_solution.append(temp_result)</span><br><span class="line">            start = temp_destination</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> result_solution:</span><br><span class="line">        result = []</span><br><span class="line">        temp1 = [x.split(<span class="string">' -&gt; '</span>) <span class="keyword">for</span> x <span class="keyword">in</span> result_solution]</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> temp1:</span><br><span class="line">            <span class="keyword">for</span> station <span class="keyword">in</span> x:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> station <span class="keyword">in</span> result:</span><br><span class="line">                    result.append(station)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">' -&gt; '</span>.join(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"No way from <span class="subst">&#123;start&#125;</span> to <span class="subst">&#123;destination&#125;</span> go by <span class="subst">&#123;go_by&#125;</span>."</span></span><br></pre></td></tr></table></figure><blockquote><p>测试。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>search_go_by(<span class="string">'苹果园'</span>, <span class="string">'万寿路'</span>, <span class="string">'六里桥'</span>, METRO)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'苹果园 -&gt; 古城 -&gt; 八角游乐园 -&gt; 八宝山 -&gt; 玉泉路 -&gt; 五棵松 -&gt; 万寿路 -&gt; 公主坟 -&gt; 莲花桥 -&gt; 六里桥'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>search_go_by(<span class="string">'苹果园'</span>, [<span class="string">'八宝山'</span>, <span class="string">'杨庄'</span>], <span class="string">'六里桥'</span>, METRO)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'苹果园 -&gt; 古城 -&gt; 八角游乐园 -&gt; 八宝山 -&gt; 杨庄 -&gt; 西黄村 -&gt; 廖公庄 -&gt; 田村 -&gt; 海淀五路居 -&gt; 慈寿寺 -&gt; 西钓鱼台 -&gt; 公主坟 -&gt; 莲花桥 -&gt; 六里桥'</span></span><br></pre></td></tr></table></figure><h2 id="5-加入站间距离权重的图，使用networkx内置api进行最短路径搜寻"><a href="#5-加入站间距离权重的图，使用networkx内置api进行最短路径搜寻" class="headerlink" title="5.加入站间距离权重的图，使用networkx内置api进行最短路径搜寻"></a>5.加入站间距离权重的图，使用<code>networkx</code>内置<code>api</code>进行最短路径搜寻</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip_station_with_distance</span><span class="params">(metro_line)</span>:</span></span><br><span class="line">    connected_station = []</span><br><span class="line">    station1 = list(metro_line.keys())</span><br><span class="line">    station2 = list(metro_line.keys())</span><br><span class="line">    station2.pop(<span class="number">0</span>)</span><br><span class="line">    result = list(zip(station1, station2))</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> result:</span><br><span class="line">        distance = geo_distance(each[<span class="number">0</span>], each[<span class="number">1</span>])</span><br><span class="line">        connected_station.append(distance)</span><br><span class="line">    result = list(zip(result, connected_station))</span><br><span class="line">    <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(result):</span><br><span class="line">        result[i] = x[<span class="number">0</span>] + (x[<span class="number">1</span>],)</span><br><span class="line">    <span class="keyword">return</span> list(result)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">METRO_WITH_DISTANCE = nx.Graph()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放所有站点经纬度的信息</span></span><br><span class="line">station_nodes_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> metro, stations <span class="keyword">in</span> metro_map.items():</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> stations.items():</span><br><span class="line">        station_nodes_dict[k] = v</span><br><span class="line">    <span class="keyword">if</span> metro == <span class="string">'北京地铁2号线'</span>:</span><br><span class="line">        METRO_WITH_DISTANCE.add_cycle(stations.keys())</span><br><span class="line">    <span class="keyword">elif</span> metro == <span class="string">'北京地铁10号线'</span>:</span><br><span class="line">        METRO_WITH_DISTANCE.add_cycle(stations.keys())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        METRO_WITH_DISTANCE.add_weighted_edges_from(zip_station_with_distance(metro_map[metro]))</span><br><span class="line">    METRO_WITH_DISTANCE.add_nodes_from(stations.keys()) </span><br><span class="line">    </span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">20</span>))</span><br><span class="line">METRO_WITH_DISTANCE.add_edge(<span class="string">'阎村东'</span>, <span class="string">'苏庄'</span>)</span><br><span class="line">nx.draw(METRO_WITH_DISTANCE, station_nodes_dict, with_labels = <span class="literal">False</span>, node_size=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="./pics/lableless.png" alt="lableless"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">20</span>))</span><br><span class="line">nx.draw(METRO_WITH_DISTANCE, station_nodes_dict, with_labels = <span class="literal">True</span>, node_size=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="./pics/labled.png" alt="lableless"></p><blockquote><p>搜索效果对比，10000次搜索，手动实现的<code>search()</code>函数与内置的<code>dijkstra_path()</code>算法相同结果比率为0.4617，手动实现的还有改善提升空间</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> test <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">    same_result = <span class="string">'different result'</span></span><br><span class="line">    start = random.choice(list(METRO_WITH_DISTANCE.nodes()))</span><br><span class="line">    destination = random.choice(list(METRO_WITH_DISTANCE.nodes()))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> start != destination:</span><br><span class="line">        api_method = <span class="string">' -&gt; '</span>.join(nx.dijkstra_path(METRO_WITH_DISTANCE, start, destination))</span><br><span class="line">        station_number_1 = len(nx.dijkstra_path(METRO_WITH_DISTANCE, start, destination))</span><br><span class="line">        </span><br><span class="line">        search_method = search(start, destination, METRO)</span><br><span class="line">        station_number_2 = len(search_method.split(<span class="string">' -&gt; '</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> api_method == search_method:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            same_result = <span class="string">'same result'</span></span><br><span class="line">        stations_count = <span class="string">'same_station_number'</span> <span class="keyword">if</span> station_number_1 == station_number_2 <span class="keyword">else</span> <span class="string">'different_station_number'</span></span><br><span class="line">        print(<span class="string">f"dijkstra_method: <span class="subst">&#123;api_method&#125;</span> with <span class="subst">&#123;stations_count&#125;</span> stations."</span>)</span><br><span class="line">        print(<span class="string">f"search_method:   <span class="subst">&#123;search_method&#125;</span> with <span class="subst">&#123;stations_count&#125;</span> stations."</span>)</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;same_result&#125;</span>"</span>)</span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">50</span>)</span><br><span class="line">same_rate = count / <span class="number">10000</span></span><br><span class="line">print(<span class="string">f"same rate <span class="subst">&#123;same_rate&#125;</span>."</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> NLP </category>
          
          <category> 智能系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python可变数据结构的陷阱</title>
      <link href="/2019/07/09/Python%E5%8F%AF%E5%8F%98%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E9%99%B7%E9%98%B1/"/>
      <url>/2019/07/09/Python%E5%8F%AF%E5%8F%98%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E9%99%B7%E9%98%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-标识，别名和副本"><a href="#1-标识，别名和副本" class="headerlink" title="1.标识，别名和副本"></a>1.标识，别名和副本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>],(<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_2 = list_1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_2</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1 <span class="keyword">is</span> list_2</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_3 = list_1[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_3</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1 <span class="keyword">is</span> list_3</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>list_1</code>和<code>list_2</code>均是对象标识，且两者互为对方别名。两者在内存中的引用为同一列表对象。</li><li><code>list_3</code>为<code>list_1</code>副本（同时也是<code>list_2</code>副本），副本引用一份同样容器结构的不同对象。副本创建默认是浅复制，即同<code>copy</code>模块中的<code>copy</code>方法。</li></ul></blockquote><a id="more"></a><h3 id="2-深浅复制"><a href="#2-深浅复制" class="headerlink" title="2.深浅复制"></a>2.深浅复制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_4 = copy.copy(list_1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_4</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_4 <span class="keyword">is</span> list_1</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>浅复制本质和通过<code>list()</code>方法或者<code>list_1[:]</code>创建的副本对象一致。</li><li>对不可变序列如<code>str,bytes,tuple</code>使用<code>[:]</code>方式创建的副本，其返回同一个对象的引用。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_5 = copy.deepcopy(list_1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_4</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_5</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1.append(<span class="string">'a'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,), <span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_4</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_5</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br></pre></td></tr></table></figure><blockquote><p>改变原容器结构的操作方法<code>append()</code>只作用于<code>list_1</code>。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1[<span class="number">-3</span>].append(<span class="string">'a'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="string">'a'</span>], (<span class="number">7</span>,), <span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_4</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="string">'a'</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_5</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1[<span class="number">-2</span>] += (<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="string">'a'</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>), <span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_4</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="string">'a'</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_5</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_6 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_6</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br></pre></td></tr></table></figure><blockquote><ul><li>不改变原容器结构的方法对<code>list_4</code>有效，因为副本中的可变对象与原对象引用同一列表<code>[5,6]</code>，对深复制对象无效。实际上，除非直接操作<code>list_5</code>变量，否则任何对于其他列表的操作均不会对<code>list_5</code>有影响。</li><li>对列表中<code>tuple</code>的操作，会创建一个新的<code>tuple</code>。</li><li><code>list_6</code>：将同样的值赋给一个新变量，与之前的<code>list</code>没有引用关系。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法的Python实现</title>
      <link href="/2019/07/08/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84Python%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/07/08/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84Python%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>1.是否稳定：两个数<code>a,b</code>相等，排序之前<code>a</code>在<code>b</code>前面，排序后位置不变为稳定，反之则不稳定。</p><p>2.时间复杂度：对待排序数据的总操作次数，反映为当排序数据量变化时，操作次数呈现的规律。</p><p>3.空间复杂度：算法在计算机执行时所需要存储空间的度量，是排序数据规模的函数。</p><p>4.根据是否通过<strong>比较</strong>排序来分为：</p><pre><code>比较类排序：通过比较来决定元素之间的次序，由于其时间复杂度无法突破O(nlogn)，因此也称为非线性时间比较类排序。非比较类排序：不通过比较来决定元素间的相对次序，可以突破上述比较排序的时间下限，以线性时间运行，因此也称为线性时间非比较类排序。</code></pre><h3 id="1-选择排序"><a href="#1-选择排序" class="headerlink" title="1.选择排序"></a>1.选择排序</h3><blockquote><p>在未排序的序列中找到最小（大）元素，存放到起始位置，再从剩余未排序的元素中找最小（大）元素，放到已排序序列的末尾，以此类推。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(nums_list)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums_list) - <span class="number">1</span>):</span><br><span class="line">            low_index = i</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(nums_list)):</span><br><span class="line">                <span class="keyword">if</span> nums_list[j] &lt; nums_list[low_index]:</span><br><span class="line">                    low_index = j</span><br><span class="line">            <span class="keyword">if</span> low_index != i:</span><br><span class="line">                nums_list[low_index], nums_list[i] = nums_list[i], nums_list[low_index]</span><br><span class="line">        <span class="keyword">return</span> nums_list</span><br></pre></td></tr></table></figure><a id="more"></a><center><p><img src="./gifs/selection.gif" alt="gif"></p></center><h3 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2.冒泡排序"></a>2.冒泡排序</h3><blockquote><p>比较相邻元素，如果第一个比第二个大，交换位置，重复以上到序列结束；第二次重复以上动作，除了第一个元素（已排序）。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(num_list)</span>:</span></span><br><span class="line">        epochs = len(num_list) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">            exchanged = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(num_list) - <span class="number">1</span> - epoch):</span><br><span class="line">                <span class="keyword">if</span> num_list[i] &gt; num_list[i+<span class="number">1</span>]:</span><br><span class="line">                    num_list[i], num_list[i+<span class="number">1</span>] = num_list[i+<span class="number">1</span>], num_list[i]</span><br><span class="line">                    exchanged = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> exchanged:</span><br><span class="line">                <span class="keyword">return</span> num_list</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/bubble.gif" alt="gif"></p></center><h3 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3.插入排序"></a>3.插入排序</h3><blockquote><ul><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤2~5。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span><span class="params">(nums_list)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums_list)):</span><br><span class="line">            insert_value = nums_list[i]</span><br><span class="line">            j = i - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j &gt;= <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> nums_list[j] &gt; insert_value:</span><br><span class="line">                    nums_list[j + <span class="number">1</span>] = nums_list[j]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    nums_list[j + <span class="number">1</span>] = insert_value</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            nums_list[j + <span class="number">1</span>] = insert_value</span><br><span class="line">        <span class="keyword">return</span> nums_list</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/insertion.gif" alt="gif"></p></center><h3 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4.希尔排序"></a>4.希尔排序</h3><blockquote><ul><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li><li>按增量序列个数k，对序列进行k趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shell_insertion_sort</span><span class="params">(num_list, start_index, increment)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> inserting_index <span class="keyword">in</span> range(start_index+increment, len(num_list), increment):</span><br><span class="line">            inserting_value = num_list[inserting_index]</span><br><span class="line">            i = inserting_index - increment</span><br><span class="line">            <span class="keyword">while</span> i &gt;= start_index:</span><br><span class="line">                <span class="keyword">if</span> num_list[i] &gt; inserting_value:</span><br><span class="line">                    num_list[i+increment] = num_list[i]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    num_list[i+increment] = inserting_value</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                i -= increment</span><br><span class="line">            num_list[i+increment] = inserting_value</span><br><span class="line">        <span class="keyword">return</span> num_list</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/shell.gif" alt="gif"></p></center><h3 id="5-归并排序"><a href="#5-归并排序" class="headerlink" title="5.归并排序"></a>5.归并排序</h3><blockquote><ul><li>把长度为n的输入序列分成两个长度为n/2的子序列；</li><li>对这两个子序列分别采用归并排序；</li><li>将两个排序好的子序列合并成一个最终的排序序列。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(num_list)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(num_list) &lt; <span class="number">2</span>: <span class="keyword">return</span> num_list</span><br><span class="line">        mid_index = len(num_list) // <span class="number">2</span></span><br><span class="line">        left_list = num_list[:mid_index]</span><br><span class="line">        right_list = num_list[mid_index:]</span><br><span class="line">        left_list = MergeSort.merge_sort(left_list)</span><br><span class="line">        right_list = MergeSort.merge_sort(right_list)</span><br><span class="line"></span><br><span class="line">        left_index = <span class="number">0</span></span><br><span class="line">        right_index = <span class="number">0</span></span><br><span class="line">        all_index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left_index &lt; len(left_list) <span class="keyword">and</span> right_index &lt; len(right_list):</span><br><span class="line">            <span class="comment"># 两个字列表都未遍历完</span></span><br><span class="line">            <span class="keyword">if</span> left_list[left_index] &lt; right_list[right_index]:</span><br><span class="line">                num_list[all_index] = left_list[left_index]</span><br><span class="line">                left_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_list[all_index] = right_list[right_index]</span><br><span class="line">                right_index += <span class="number">1</span></span><br><span class="line">            all_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left_index &lt; len(left_list):</span><br><span class="line">            <span class="comment"># 左列表未遍历完</span></span><br><span class="line">            num_list[all_index] = left_list[left_index]</span><br><span class="line">            left_index += <span class="number">1</span></span><br><span class="line">            all_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> right_index &lt; len(right_list):</span><br><span class="line">            <span class="comment"># 右列表未遍历完</span></span><br><span class="line">            num_list[all_index] = right_list[right_index]</span><br><span class="line">            right_index += <span class="number">1</span></span><br><span class="line">            all_index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> num_list</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/merge.gif" alt="gif"></p></center><h3 id="6-快速排序"><a href="#6-快速排序" class="headerlink" title="6.快速排序"></a>6.快速排序</h3><blockquote><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）；</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(num_list)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(num_list) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> num_list</span><br><span class="line">        base_value = num_list[<span class="number">0</span>]</span><br><span class="line">        left_index = <span class="number">1</span></span><br><span class="line">        right_index = len(num_list) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">while</span> left_index &lt;= right_index:</span><br><span class="line">                <span class="keyword">if</span> num_list[left_index] &lt;= base_value:</span><br><span class="line">                    left_index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> num_list[right_index] &gt;= base_value:</span><br><span class="line">                    right_index -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> left_index &lt;= right_index:</span><br><span class="line">                num_list[left_index], num_list[right_index] = num_list[right_index], num_list[left_index]</span><br><span class="line">                left_index += <span class="number">1</span></span><br><span class="line">                right_index -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        num_list[<span class="number">0</span>] = num_list[right_index]</span><br><span class="line">        num_list[right_index] = base_value</span><br><span class="line"></span><br><span class="line">        left_list = num_list[:right_index]</span><br><span class="line">        right_list = num_list[right_index+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> QuickSort.quick_sort(left_list) + [num_list[right_index]] + QuickSort.quick_sort(right_list)</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/quicksort.gif" alt="gif"></p></center><h3 id="7-桶排序"><a href="#7-桶排序" class="headerlink" title="7.桶排序"></a>7.桶排序</h3><blockquote><ul><li>设置一个定量的数组当作空桶；</li><li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li><li>对每个不是空的桶进行排序；</li><li>从不是空的桶里把排好序的数据拼接起来。 </li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BucketSort</span>:</span></span><br><span class="line">    DEFAULT_BUCKET_SIZE=<span class="number">5</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(my_list, bucket_size=DEFAULT_BUCKET_SIZE)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(my_list) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">"Please add some elements in the array."</span>)</span><br><span class="line">    </span><br><span class="line">        min_value, max_value = (min(my_list), max(my_list))</span><br><span class="line">        bucket_count = ((max_value - min_value) // bucket_size + <span class="number">1</span>)</span><br><span class="line">        buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(int(bucket_count))]</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(my_list)):</span><br><span class="line">            buckets[int((my_list[i] - min_value) // bucket_size)].append(my_list[i])</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> sorted([buckets[i][j] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(buckets))</span><br><span class="line">                                     <span class="keyword">for</span> j <span class="keyword">in</span> range(len(buckets[i]))])</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/bucket.gif" alt="gif"></p></center><h3 id="8-计数排序"><a href="#8-计数排序" class="headerlink" title="8.计数排序"></a>8.计数排序</h3><blockquote><ul><li>找出待排序的数组中最大和最小的元素；</li><li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li><li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li><li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountingSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(collection)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> collection:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># get some information about the collection</span></span><br><span class="line">        coll_len = len(collection)</span><br><span class="line">        coll_max = max(collection)</span><br><span class="line">        coll_min = min(collection)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># create the counting array</span></span><br><span class="line">        counting_arr_length = coll_max + <span class="number">1</span> - coll_min</span><br><span class="line">        counting_arr = [<span class="number">0</span>] * counting_arr_length</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># count how much a number appears in the collection</span></span><br><span class="line">        <span class="keyword">for</span> number <span class="keyword">in</span> collection:</span><br><span class="line">            counting_arr[number - coll_min] += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment"># sum each position with it's predecessors. now, counting_arr[i] tells</span></span><br><span class="line">        <span class="comment"># us how many elements &lt;= i has in the collection</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, counting_arr_length):</span><br><span class="line">            counting_arr[i] = counting_arr[i] + counting_arr[i<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># create the output collection</span></span><br><span class="line">        ordered = [<span class="number">0</span>] * coll_len</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># place the elements in the output, respecting the original order (stable</span></span><br><span class="line">        <span class="comment"># sort) from end to begin, updating counting_arr</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(<span class="number">0</span>, coll_len)):</span><br><span class="line">            ordered[counting_arr[collection[i] - coll_min]<span class="number">-1</span>] = collection[i]</span><br><span class="line">            counting_arr[collection[i] - coll_min] -= <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> ordered</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/counting.gif" alt="gif"></p></center><h3 id="9-基数排序"><a href="#9-基数排序" class="headerlink" title="9.基数排序"></a>9.基数排序</h3><blockquote><ul><li>取得数组中的最大数，并取得位数；</li><li>arr为原始数组，从最低位开始取每个位组成radix数组；</li><li>对radix进行计数排序（利用计数排序适用于小范围数的特点）；</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RadixSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span><span class="params">(lst)</span>:</span></span><br><span class="line">        RADIX = <span class="number">10</span></span><br><span class="line">        placement = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment"># get the maximum number</span></span><br><span class="line">        max_digit = max(lst)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span> placement &lt; max_digit:</span><br><span class="line">          <span class="comment"># declare and initialize buckets</span></span><br><span class="line">          buckets = [list() <span class="keyword">for</span> _ <span class="keyword">in</span> range( RADIX )]</span><br><span class="line">    </span><br><span class="line">          <span class="comment"># split lst between lists</span></span><br><span class="line">          <span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">            tmp = int((i / placement) % RADIX)</span><br><span class="line">            buckets[tmp].append(i)</span><br><span class="line">    </span><br><span class="line">          <span class="comment"># empty lists into lst array</span></span><br><span class="line">          a = <span class="number">0</span></span><br><span class="line">          <span class="keyword">for</span> b <span class="keyword">in</span> range( RADIX ):</span><br><span class="line">            buck = buckets[b]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> buck:</span><br><span class="line">              lst[a] = i</span><br><span class="line">              a += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">          <span class="comment"># move to next</span></span><br><span class="line">          placement *= RADIX</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/radix.gif" alt="gif"></p></center><pre><code>基数排序 vs 计数排序 vs 桶排序这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异:基数排序：根据键值的每位数字来分配桶；计数排序：每个桶只存储单一键值；桶排序：每个桶存储一定范围的数值；</code></pre><h3 id="10-堆排序"><a href="#10-堆排序" class="headerlink" title="10.堆排序"></a>10.堆排序</h3><blockquote><ul><li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li><li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；</li><li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heapify</span><span class="params">(unsorted, index, heap_size)</span>:</span></span><br><span class="line">        largest = index</span><br><span class="line">        left_index = <span class="number">2</span> * index + <span class="number">1</span></span><br><span class="line">        right_index = <span class="number">2</span> * index + <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> left_index &lt; heap_size <span class="keyword">and</span> unsorted[left_index] &gt; unsorted[largest]:</span><br><span class="line">            largest = left_index</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> right_index &lt; heap_size <span class="keyword">and</span> unsorted[right_index] &gt; unsorted[largest]:</span><br><span class="line">            largest = right_index</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> largest != index:</span><br><span class="line">            unsorted[largest], unsorted[index] = unsorted[index], unsorted[largest]</span><br><span class="line">            HeapSort.heapify(unsorted, largest, heap_size)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(unsorted)</span>:</span></span><br><span class="line">        n = len(unsorted)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n // <span class="number">2</span> - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            HeapSort.heapify(unsorted, i, n)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            unsorted[<span class="number">0</span>], unsorted[i] = unsorted[i], unsorted[<span class="number">0</span>]</span><br><span class="line">            HeapSort.heapify(unsorted, <span class="number">0</span>, i)</span><br><span class="line">        <span class="keyword">return</span> unsorted</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/heap.gif" alt="gif"></p></center><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><center><p><img src="./gifs/%E5%A4%8D%E6%9D%82%E5%BA%A6.png" alt="gif"></p></center>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BFS &amp; DFS</title>
      <link href="/2019/07/08/DFS-BFS/"/>
      <url>/2019/07/08/DFS-BFS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-BFS"><a href="#1-BFS" class="headerlink" title="1.BFS"></a>1.BFS</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    visited = [start]</span><br><span class="line">    seen = set()  </span><br><span class="line">    <span class="keyword">while</span> visited:</span><br><span class="line">        frontier = visited.pop() </span><br><span class="line">        <span class="keyword">if</span> frontier <span class="keyword">in</span> seen: <span class="keyword">continue</span>      </span><br><span class="line">        <span class="keyword">for</span> successor <span class="keyword">in</span> graph[frontier]:</span><br><span class="line">            <span class="keyword">if</span> successor <span class="keyword">in</span> seen: <span class="keyword">continue</span></span><br><span class="line">            print(successor)           </span><br><span class="line">            visited = [successor] + visited</span><br><span class="line">        seen.add(frontier)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> seen</span><br></pre></td></tr></table></figure><a id="more"></a><center><p><img src="./gifs/BFS.gif" alt="bfs"></p></center><h3 id="2-DFS"><a href="#2-DFS" class="headerlink" title="2.DFS"></a>2.DFS</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dfs_seen = set()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    dfs_seen.add(start)</span><br><span class="line">    print(start)</span><br><span class="line">    <span class="keyword">if</span> len(graph[start]) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> successor <span class="keyword">in</span> graph[start]:</span><br><span class="line">        <span class="keyword">if</span> successor <span class="keyword">in</span> dfs_seen:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        dfs(graph, successor)</span><br><span class="line">    <span class="keyword">return</span> dfs_seen</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/DFS.gif" alt="dfs"></p></center><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">number_graph = &#123;</span><br><span class="line">    <span class="number">1</span>: [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">2</span>: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    <span class="number">3</span>: [<span class="number">1</span>, <span class="number">6</span>],</span><br><span class="line">    <span class="number">4</span>: [<span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    <span class="number">5</span>: [<span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">    <span class="number">6</span>: [<span class="number">3</span>, <span class="number">11</span>, <span class="number">10</span>],</span><br><span class="line">    <span class="number">7</span>: [<span class="number">4</span>],</span><br><span class="line">    <span class="number">8</span>: [<span class="number">4</span>, <span class="number">12</span>],</span><br><span class="line">    <span class="number">9</span>: [<span class="number">5</span>],</span><br><span class="line">    <span class="number">10</span>: [<span class="number">6</span>],</span><br><span class="line">    <span class="number">11</span>: [<span class="number">6</span>, <span class="number">13</span>],</span><br><span class="line">    <span class="number">12</span>: [<span class="number">8</span>],</span><br><span class="line">    <span class="number">13</span>: [<span class="number">11</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(bfs(number_graph, <span class="number">1</span>))</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br><span class="line"></span><br><span class="line">print(dfs(number_graph, <span class="number">1</span>))</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python&#39;s Trick 01</title>
      <link href="/2019/07/08/Python-s-Trick/"/>
      <url>/2019/07/08/Python-s-Trick/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-Python的哈希"><a href="#1-Python的哈希" class="headerlink" title="1.Python的哈希"></a>1.Python的哈希</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#125;</span><br><span class="line">d[<span class="number">5.5</span>] = <span class="string">'hello'</span></span><br><span class="line">d[<span class="number">4</span>] = <span class="string">'world'</span></span><br><span class="line">d[<span class="number">4.0</span>] = <span class="string">'WORLD'</span></span><br><span class="line">d[<span class="number">4</span>]</span><br><span class="line">Out[<span class="number">35</span>]: <span class="string">'WORLD'</span></span><br><span class="line">d[<span class="number">4.0</span>]</span><br><span class="line">Out[<span class="number">36</span>]: <span class="string">'WORLD'</span></span><br></pre></td></tr></table></figure><blockquote><p>Python字典通过检查键值是否相等和比较哈希值来确定两个键是否相相同。具有相同值的不可变对象在Python中具有相同哈希值，当然，具有不同值的对象也可能具有相同哈希（哈希冲突）。</p></blockquote><a id="more"></a><h3 id="2-在哪儿Return"><a href="#2-在哪儿Return" class="headerlink" title="2.在哪儿Return"></a>2.在哪儿Return</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">some_func()</span><br><span class="line">Out[<span class="number">28</span>]: <span class="number">2</span></span><br><span class="line">a = some_func()</span><br><span class="line">a</span><br><span class="line">Out[<span class="number">30</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>1.不管哪种组合，<code>finally</code>中的语句都会执行；2.函数的返回值取决于最后执行的<code>return</code>。<br><a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#finally" target="_blank" rel="noopener">More about finally</a></p></blockquote><h3 id="3-你是什么类"><a href="#3-你是什么类" class="headerlink" title="3.你是什么类"></a>3.你是什么类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">TEST() == TEST()</span><br><span class="line">Out[<span class="number">38</span>]: <span class="literal">False</span></span><br><span class="line">TEST() <span class="keyword">is</span> TEST()</span><br><span class="line">Out[<span class="number">39</span>]: <span class="literal">False</span></span><br><span class="line">hash(TEST()) == hash(TEST())</span><br><span class="line">Out[<span class="number">41</span>]: <span class="literal">True</span></span><br><span class="line">id(TEST()) == id(TEST())</span><br><span class="line">Out[<span class="number">42</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>为什么<code>is</code>和<code>id()</code>的结果不一样？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TEST</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span> print(<span class="string">'created'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span> print(<span class="string">'deleted'</span>)</span><br><span class="line"></span><br><span class="line">TEST() <span class="keyword">is</span> TEST()</span><br><span class="line">created</span><br><span class="line">created</span><br><span class="line">deleted</span><br><span class="line">deleted</span><br><span class="line">Out[<span class="number">44</span>]: <span class="literal">False</span></span><br><span class="line">id(TEST()) == id(TEST())</span><br><span class="line">created</span><br><span class="line">deleted</span><br><span class="line">created</span><br><span class="line">deleted</span><br><span class="line">Out[<span class="number">45</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p><code>is</code>判断时，两边的实例同时创建，即创建了两个不同实例后才判断地址；<code>id()</code>的判断则是先创建一个实例后，调用<code>id()</code>函数后销毁；当连续两次进行<code>id()</code>调用时，Python会将相同内存地址分配给第二个对象，因此<code>id</code>相同。</p></blockquote><h3 id="4-到底是不是同一个对象"><a href="#4-到底是不是同一个对象" class="headerlink" title="4.到底是不是同一个对象"></a>4.到底是不是同一个对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple_1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple_2 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple_1 <span class="keyword">is</span> tuple_2</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string_1 = <span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string_2 = <span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string_1 <span class="keyword">is</span> string_2</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>共享<code>string literals</code>是CPython的一种优化措施，称为<code>驻留(interning)</code>，防止重复创建“热门”数字或字符串。</li><li>注意CPython不会驻留所有字符串和数字，所以不要依赖这个优化措施。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1234</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1234</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">-5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">-5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">-6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">-6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p><code>CPython</code>中的<code>small_ints</code>，其中包含了<code>[-5,...256]</code>的整型值，为了减少内存管理在处理小整型数字时的开销，<code>CPython</code>在解释器中使用了<code>小整数对象池</code>进行优化，即如创建处于这个区间内的整型值，变量将指向内存中的同一个地址的对象。在这个区间之外的数则是不同的对象。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一个模型 -- 线性回归</title>
      <link href="/2019/07/07/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9E%8B-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
      <url>/2019/07/07/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9E%8B-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="预测房子的价格"><a href="#预测房子的价格" class="headerlink" title="预测房子的价格"></a>预测房子的价格</h2><h3 id="1-第一个问题-–-回归模型"><a href="#1-第一个问题-–-回归模型" class="headerlink" title="1.第一个问题 – 回归模型"></a>1.第一个问题 – 回归模型</h3><p>首先你可能需要一些房子案例资料，并简单的根据房子大小和房价做出简单的一个模型（咱们假如房价只和房子面积有关），这个简单的模型可能长这样：</p><a id="more"></a><center><p><img src="./pics/%E9%9D%A2%E7%A7%AF-%E6%88%BF%E4%BB%B7%E8%B6%8B%E5%8A%BF%E5%9B%BE.png" alt="面积-房价趋势图"></p></center><p>我们现在要做的，就是根据已知的图来画出一条线，然后<strong>尽量贴合</strong>已知的数据，因为这样预测出来的结果有可能更加准确。简单的线性回归方程长这样：</p><p>$$h_{\theta}(x) = {\theta}_0 + {\theta}_1x$$</p><p>或者你也可以写成更熟悉的样子：</p><p>$$ y = kx + b $$</p><p>画上去可能长这样：</p><center><p><img src="./pics/%E9%9D%A2%E7%A7%AF-%E6%88%BF%E4%BB%B7%E8%B6%8B%E5%8A%BF%E5%9B%BE2.png" alt="面积-房价趋势图"></p></center><h3 id="2-如何选出最佳函数-–-代价函数"><a href="#2-如何选出最佳函数-–-代价函数" class="headerlink" title="2.如何选出最佳函数 – 代价函数"></a>2.如何选出最佳函数 – 代价函数</h3><p>为了简化 $J$ 的推导过程，此处假设 $\theta_0$ 为0，因此函数是一条通过原点的直线。</p><p>$$ J(\theta_0, \theta_1) = \frac{\sum_{i=1}^m(h_\theta(x^{(i)}) - y^{(i)})^2}{2m} $$</p><h3 id="3-最佳函数-–-目标函数"><a href="#3-最佳函数-–-目标函数" class="headerlink" title="3.最佳函数 – 目标函数"></a>3.最佳函数 – 目标函数</h3><p>代价函数最小值对应的 $\theta_1$ 函数为目标函数，即最贴合已知数据的一条拟合线。</p><h3 id="4-寻找最优解释方法一-–-梯度下降"><a href="#4-寻找最优解释方法一-–-梯度下降" class="headerlink" title="4.寻找最优解释方法一  – 梯度下降"></a>4.寻找最优解释方法一  – 梯度下降</h3><p>下图深蓝色的地方均是一个合适的参数组合，称为局部最优解。<br><strong>注意：线性回归方程的代价函数为凸函数，存在一个全局最优解，而没有局部最优解。</strong></p><center><p><img src="./pics/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D.png" alt="梯度下降"></p></center>梯度下降的公式如下：<center><p><img src="./pics/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D_2.png" alt="梯度下降"></p></center>工作原理：<center><p><img src="./pics/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="梯度下降工作原理"></p></center>其中，$\alpha$是一个为正数的学习速率，大小将决定函数收敛的结果：<p>$$\theta _{1}=\theta _{1}-\alpha \dfrac {\partial J\left( \theta _{1}\right) }{\partial \theta _{1}}$$</p><p>导数部分为代价函数在$\theta_1$处的斜率，当$\theta_1$在最优解（斜率为0处）右边时，斜率为正，因此每次迭代的结果$\theta_1$都会减小；反之，当$\theta_1$在最优解左边时，斜率为负，每次迭代$\theta_1$都会增大。这两种情况的迭代均会使得$\theta_1$不断靠近最优解。而学习速率$\alpha$的选择，则会决定迭代的次数以及迭代的结果：</p><center><p><img src="./pics/%E5%AD%A6%E4%B9%A0%E9%80%9F%E7%8E%87.png" alt="学习速率"></p></center>1.当$\alpha$很小时，每次迭代的结果是参数变化很小，因此导致迭代的次数变多，但是最终将会得到一个最优解；<p>2.当$\alpha$很大时，在靠近最优解时，因为$\alpha$很大，所以下一次的迭代很可能错过最优解，最终可能导致迭代在最优解左右两边取值，甚至无法收敛而发散。</p><p>3.那么是否需要在每次迭代的同时，取不同的$\alpha$呢？答案是不需要：</p><center><p><img src="./pics/%E5%AD%A6%E4%B9%A0%E9%80%9F%E7%8E%872.png" alt="学习速率2"></p></center>因为每次迭代后，与$\alpha$相乘的偏导数部分都会变小（对于偏导数为负情况，与$\theta_1$相加的部分每次同样都更小），即<p>$$\alpha \dfrac {\partial }{\partial \theta }J_{1}\left( \theta _{1}\right) $$<br>部分每次都变小，因此随着迭代的进行，梯度下降每次将自动减小下降速率，而$\alpha$则不需要跟随迭代变化。</p><p>4.如果$\theta_1$一开始就在最优解处，则每次迭代后$\theta_1$都不会变化，因为偏导数结果为0。</p><center><p><img src="./pics/%E5%B1%80%E9%83%A8%E6%9C%80%E4%BC%98%E8%A7%A3.png" alt="局部最优解"></p></center><h3 id="5-结合代价函数的梯度下降应用"><a href="#5-结合代价函数的梯度下降应用" class="headerlink" title="5.结合代价函数的梯度下降应用"></a>5.结合代价函数的梯度下降应用</h3><p>将线性回归的代价函数进行偏微分计算后得到（注意$\theta_0$，$\theta_1$均为常数系数）得到：</p><center><p><img src="./pics/%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B0%E7%9A%84%E5%81%8F%E5%AF%BC%E6%95%B0.png" alt="代价函数的偏导数"></p></center>因此对于线性回归方程，其最优参数组合的求解如下：<center><p><img src="./pics/%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3.png" alt="线性方程的最优解"></p></center><h3 id="6-寻找最优解的方法二：正规方程组解法"><a href="#6-寻找最优解的方法二：正规方程组解法" class="headerlink" title="6.寻找最优解的方法二：正规方程组解法"></a>6.寻找最优解的方法二：正规方程组解法</h3>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python判断机制</title>
      <link href="/2019/07/07/Python%E5%88%A4%E6%96%AD%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/07/07/Python%E5%88%A4%E6%96%AD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-Python判空"><a href="#1-Python判空" class="headerlink" title="1.Python判空"></a>1.Python判空</h3><p>调用对象的<code>__bool__</code>函数，若不存在该方法，则调用<code>__len__</code>方法，返回0为空，否则为1.如果某类对象没有定义这两种方法，则该类实例化的任何实例判断时均为真。</p><h3 id="2-Python判等"><a href="#2-Python判等" class="headerlink" title="2.Python判等"></a>2.Python判等</h3><h3 id="2-1-is和-的区别"><a href="#2-1-is和-的区别" class="headerlink" title="2.1 is和==的区别"></a>2.1 <code>is</code>和<code>==</code>的区别</h3><p><code>is</code>根据对象的内存地址判断是否为同一个对象，即调用<code>id()</code>后的地址，如果一致则返回真。</p><p><code>==</code>调用对象的<code>__eq__</code>方法来判断两个对象是否相等，具体返回结果取决于该方法的具体实现。</p><a id="more"></a><h3 id="2-2-变量不是对象"><a href="#2-2-变量不是对象" class="headerlink" title="2.2 变量不是对象"></a>2.2 变量不是对象</h3><p>Python中，变量名应该理解成对象的标注，而不是对象的盒子。对象是先于变量存在的，即当我们做这样的赋值时：<code>a = 123</code>，python先创造出<code>123</code>整型对象后，才绑定给左边的<code>a</code>变量，而这个对象是可以绑定给多个变量的，比如<code>b,c,d</code>等。再举个深入跟类相关的例子，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f"Test's id is <span class="subst">&#123;id(self)&#125;</span>"</span>)</span><br><span class="line">        </span><br><span class="line">x = Test()</span><br><span class="line">y = Test() + <span class="number">2</span></span><br></pre></td></tr></table></figure><p>此处我们每次实例化一个Test对象，都会打印对应的实例地址，<code>x,y</code>两次调用都会打印地址，但是第二次打印后将会报错，因为<code>Test</code>类并没有实现<code>__add__</code>方法。可以看出，不管等号左边是什么名称的变量，python都只会在创造该对象后才将其绑定给左边的变量。</p><h3 id="2-3-可变数据结构和不可变数据结构赋值时的区别"><a href="#2-3-可变数据结构和不可变数据结构赋值时的区别" class="headerlink" title="2.3 可变数据结构和不可变数据结构赋值时的区别"></a>2.3 可变数据结构和不可变数据结构赋值时的区别</h3><p>对于可变的数据结构，同时赋值两个空的对象id是不一样的，如两个空列表/空字典/空元组：<code>a is b</code>为假。</p><p>对于不可变的数据结构，同时赋值两个空洞的对象，其id是一样的，如两个空集合/空字符串：<code>a is b</code>为真。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">a <span class="keyword">is</span> b</span><br><span class="line">Out[<span class="number">4</span>]: <span class="literal">True</span></span><br><span class="line">a == b</span><br><span class="line">Out[<span class="number">5</span>]: <span class="literal">True</span></span><br><span class="line">c = []</span><br><span class="line">d = []</span><br><span class="line">c <span class="keyword">is</span> d</span><br><span class="line">Out[<span class="number">8</span>]: <span class="literal">False</span></span><br><span class="line">c == d</span><br><span class="line">Out[<span class="number">9</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
