<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dijsktra算法的Python实现</title>
      <link href="/2019/07/20/Dijsktra%E7%AE%97%E6%B3%95%E7%9A%84Python%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/07/20/Dijsktra%E7%AE%97%E6%B3%95%E7%9A%84Python%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>参数设定。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">inf = float(<span class="string">'inf'</span>)</span><br><span class="line">graph = &#123;</span><br><span class="line">    <span class="string">'start'</span>: &#123;<span class="string">'a'</span>: <span class="number">6</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    <span class="string">'a'</span>: &#123;<span class="string">'fin'</span> : <span class="number">1</span>&#125;,</span><br><span class="line">    <span class="string">'b'</span>: &#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'fin'</span>: <span class="number">5</span>&#125;,</span><br><span class="line">    <span class="string">'fin'</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">costs = &#123;</span><br><span class="line">    <span class="string">'a'</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="string">'b'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'fin'</span>: inf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parents = &#123;</span><br><span class="line">    <span class="string">'a'</span>: <span class="string">'start'</span>,</span><br><span class="line">    <span class="string">'b'</span>: <span class="string">'start'</span>,</span><br><span class="line">    <span class="string">'fin'</span>: <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">processed = []</span><br></pre></td></tr></table></figure><a id="more"></a><center><p><img src="./graph.png" alt="png"></p></center><blockquote><p>函数实现。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">r = [<span class="string">'start'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_lowest_cost_node</span><span class="params">(costs)</span>:</span></span><br><span class="line">    result = list(filter(<span class="keyword">lambda</span> x: x[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> processed, sorted(costs.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])))</span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">0</span>][<span class="number">0</span>] <span class="keyword">if</span> result <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_next_</span><span class="params">(result, key=<span class="string">'start'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> result.items():</span><br><span class="line">        <span class="keyword">if</span> k == key:</span><br><span class="line">            r.append(v)</span><br><span class="line">            get_next_(result, v)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijsktra_algorithm</span><span class="params">(graph=graph, costs=costs, parents=parents)</span>:</span></span><br><span class="line">    node = find_lowest_cost_node(costs)</span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">while</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        cost = costs[node]</span><br><span class="line">        neighbors = graph[node]</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> neighbors.keys():</span><br><span class="line">            new_cost = cost + neighbors[n]</span><br><span class="line">            <span class="keyword">if</span> costs[n] &gt; new_cost:</span><br><span class="line">                costs[n] = new_cost</span><br><span class="line">                parents[n] = node</span><br><span class="line">        processed.append(node)</span><br><span class="line">        node = find_lowest_cost_node(costs)</span><br><span class="line">    result = &#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> parents.items()&#125;</span><br><span class="line">    result = get_next_(result)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">' -&gt; '</span>.join(result), costs[<span class="string">'fin'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>测试。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dijsktra_algorithm()</span><br><span class="line">(<span class="string">'start -&gt; b -&gt; a -&gt; fin'</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态规划表的三个常见应用及Python实现</title>
      <link href="/2019/07/20/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%A1%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%BA%94%E7%94%A8/"/>
      <url>/2019/07/20/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%A1%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-最长公共子串"><a href="#1-最长公共子串" class="headerlink" title="1.最长公共子串"></a>1.最长公共子串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_substring_matrix</span><span class="params">(str1, str2)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return all the longest common substring of two strings.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    result = []</span><br><span class="line">    row, column = len(str1), len(str2)</span><br><span class="line">    matrix = np.zeros((row, column), dtype=int)</span><br><span class="line">    <span class="keyword">for</span> i, char1 <span class="keyword">in</span> enumerate(str1):</span><br><span class="line">        <span class="keyword">for</span> j, char2 <span class="keyword">in</span> enumerate(str2):</span><br><span class="line">            <span class="keyword">if</span> char1 == char2:</span><br><span class="line">                matrix[i, j] = matrix[i<span class="number">-1</span>, j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">    max_ = matrix.max()</span><br><span class="line">    print(matrix)</span><br><span class="line">    args = np.argwhere(matrix == max_)</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        index_ = arg[<span class="number">0</span>]</span><br><span class="line">        result.append(str1[index_ - max_ + <span class="number">1</span> : index_ + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> max_, set(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>longest_substring_matrix(<span class="string">'fish'</span>, <span class="string">'fhish'</span>)</span><br><span class="line">[[<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span>]]</span><br><span class="line">(<span class="number">3</span>, [<span class="string">'ish'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>longest_substring_matrix(<span class="string">'hellowel'</span>, <span class="string">'hellfadellolflowedlfalowefsello'</span>)</span><br><span class="line">[[<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span>]]</span><br><span class="line">(<span class="number">4</span>, [<span class="string">'hell'</span>, <span class="string">'ello'</span>, <span class="string">'lowe'</span>])</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>公共子串问题求具体子串不需要另外添加行列，存在长度一样的子串，则全部返回。</p></blockquote><center><p><img src="./substring.png" alt="substring"><br><a href="https://book.douban.com/subject/26979890/" target="_blank" rel="noopener">图片来自《图解算法》</a></p></center><h3 id="2-最长公共子序列"><a href="#2-最长公共子序列" class="headerlink" title="2.最长公共子序列"></a>2.最长公共子序列</h3><blockquote><p>同编辑距离类似，最长公共子序列求具体子序列，需要构造额外多一行和一列，即初始化的时候需要将两个字符串首位添加占用符，在循环中直接忽略第一行和第一列，并设置为零即可。若存在长度相同的子序列，只返回其中一种。</p></blockquote><center><p><img src="./subsequence.png" alt="subsequence"><br><a href="https://book.douban.com/subject/26979890/" target="_blank" rel="noopener">图片来自《图解算法》</a></p></center><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_subsequence_matrix</span><span class="params">(str1, str2)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return the longest common subsequence of two strings, return one of them if there are mutiple solution with same </span></span><br><span class="line"><span class="string">    length.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    str1, str2 = <span class="string">' '</span>+ str1, <span class="string">' '</span>+ str2</span><br><span class="line">    index_ = []</span><br><span class="line">    len_1, len_2 = len(str1), len(str2)</span><br><span class="line">    <span class="keyword">if</span> str1 <span class="keyword">and</span> str2:</span><br><span class="line">        matrix = np.zeros((len_1, len_2), dtype=np.int)</span><br><span class="line">        <span class="keyword">for</span> i, char1 <span class="keyword">in</span> enumerate(str1):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> j, char2 <span class="keyword">in</span> enumerate(str2):</span><br><span class="line">                <span class="keyword">if</span> j == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> char1 == char2:</span><br><span class="line">                    matrix[i, j] = matrix[i - <span class="number">1</span>, j - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    matrix[i, j] = max(matrix[i, j - <span class="number">1</span>], matrix[i - <span class="number">1</span>, j])</span><br><span class="line">                    </span><br><span class="line">        target = np.max(matrix)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, target + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 找出第一个加1的数</span></span><br><span class="line">            <span class="comment"># 行小于列，以行索引取最小，反之，以列索引取最小</span></span><br><span class="line">            flag = <span class="number">0</span> <span class="keyword">if</span> len_1 &lt; len_2 <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">            temp = min(np.argwhere(matrix == i), key = <span class="keyword">lambda</span> x: x[flag])</span><br><span class="line">            index_.append(temp)  </span><br><span class="line">        print(matrix)</span><br><span class="line">        result = [str1[i[<span class="number">0</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> index_]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> target, result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> len_1 <span class="number">-1</span>  <span class="keyword">if</span> str1 <span class="keyword">else</span> len_2 - <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>longest_subsequence_matrix(<span class="string">'ABCDEFG'</span>, <span class="string">'BCDAFG'</span>)</span><br><span class="line">[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]]</span><br><span class="line">(<span class="number">5</span>, [<span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>longest_subsequence_matrix(<span class="string">'h1e2ll3o2y34o234u'</span>, <span class="string">'helloyou'</span>)</span><br><span class="line">[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">6</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">6</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">6</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line">(<span class="number">8</span>, [<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'y'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>])</span><br></pre></td></tr></table></figure><h3 id="3-编辑距离"><a href="#3-编辑距离" class="headerlink" title="3.编辑距离"></a>3.<a href="https://www.youtube.com/watch?v=We3YDTzNXEk" target="_blank" rel="noopener">编辑距离</a></h3><blockquote><ul><li>同求最长公共子序列类似，编辑距离初始化动态表需要额外多一行和多一列，不同的是多出来的第一行和第一列不是零，而是对应字符串的索引。</li><li>Levenshtein算法中替换操作算作两步，插入和删除算一步。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EditDistance</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, levenshtein=True)</span>:</span></span><br><span class="line">        self.solution = &#123;&#125;</span><br><span class="line">        self.levenshtein = levenshtein</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edit_distance_with_matrix</span><span class="params">(self, str1, str2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @levenshtein: susbstitute cost 2 steps while True, else cost 1 step.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        len_1, len_2 = len(str1)+<span class="number">1</span>, len(str2)+<span class="number">1</span></span><br><span class="line">        matrix = np.zeros((len_2, len_1), dtype=np.int)</span><br><span class="line">        <span class="keyword">if</span> str1 <span class="keyword">and</span> str2:</span><br><span class="line">            matrix[<span class="number">0</span>, :] = np.arange(len_1)</span><br><span class="line">            matrix[:, <span class="number">0</span>] = np.arange(len_2)</span><br><span class="line">            <span class="keyword">for</span> i, char1 <span class="keyword">in</span> enumerate(str2, start=<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> j, char2 <span class="keyword">in</span> enumerate(str1, start=<span class="number">1</span>):</span><br><span class="line">                        </span><br><span class="line">                    left = matrix[i<span class="number">-1</span>, j] + <span class="number">1</span></span><br><span class="line">                    top = matrix[i, j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> char1 != char2:</span><br><span class="line">                        diag = (matrix[i<span class="number">-1</span>, j<span class="number">-1</span>] + <span class="number">2</span>) <span class="keyword">if</span> self.levenshtein <span class="keyword">else</span> (matrix[i<span class="number">-1</span>, j<span class="number">-1</span>] + <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        diag = matrix[i<span class="number">-1</span>, j<span class="number">-1</span>]</span><br><span class="line">                    </span><br><span class="line">                    matrix[i, j] = min(left, top, diag)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> matrix[len_2<span class="number">-1</span> , len_1<span class="number">-1</span>], matrix</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (len_1,matrix)  <span class="keyword">if</span> str1 <span class="keyword">else</span> (len_2,matrix)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_matrix_solution</span><span class="params">(self, matrix)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Up refers to inserting; left refers to deleting; digonal refers to substituting.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        r, c = matrix.shape</span><br><span class="line">        <span class="keyword">if</span> r &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> matrix[<span class="number">0</span>, :c<span class="number">-1</span>]:</span><br><span class="line">                self.solution[_+<span class="number">1</span>] = <span class="string">f"delete str1.(<span class="subst">&#123;_&#125;</span>)"</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> c &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> matrix[:r<span class="number">-1</span>, <span class="number">0</span>]:</span><br><span class="line">                self.solution[_ + <span class="number">1</span>] = <span class="string">f"insert before str1.(<span class="subst">&#123;<span class="number">0</span>&#125;</span>) with str2.(<span class="subst">&#123;_&#125;</span>)"</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        row, column = np.array(matrix.shape) - <span class="number">1</span></span><br><span class="line">        target = matrix[row, column]</span><br><span class="line">        up = row - <span class="number">1</span>, column</span><br><span class="line">        left = row, column - <span class="number">1</span></span><br><span class="line">        diag = row - <span class="number">1</span>, column - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        temp = min(matrix[diag], matrix[up], matrix[left])</span><br><span class="line">        </span><br><span class="line">        flag = <span class="number">2</span> <span class="keyword">if</span> self.levenshtein <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> target != temp:</span><br><span class="line">            <span class="comment"># 删除或者插入优先</span></span><br><span class="line">            <span class="keyword">if</span> target == matrix[up] + <span class="number">1</span>:</span><br><span class="line">                self.solution[target] = <span class="string">f"insert after str1.(<span class="subst">&#123;column - <span class="number">1</span>&#125;</span>) with str2.(<span class="subst">&#123;row - <span class="number">1</span>&#125;</span>)"</span></span><br><span class="line">                <span class="keyword">return</span> self.get_matrix_solution(matrix[:row, :])</span><br><span class="line">            <span class="keyword">elif</span> target == matrix[left] + <span class="number">1</span>:</span><br><span class="line">                self.solution[target] = <span class="string">f"delete str1.(<span class="subst">&#123;column - <span class="number">1</span>&#125;</span>)"</span></span><br><span class="line">                <span class="keyword">return</span> self.get_matrix_solution(matrix[:, :column])</span><br><span class="line">            <span class="keyword">elif</span> target == matrix[diag] + flag:</span><br><span class="line">                self.solution[target] = <span class="string">f"substitute str1.(<span class="subst">&#123;column - <span class="number">1</span>&#125;</span>) with str2.(<span class="subst">&#123;row - <span class="number">1</span>&#125;</span>)"</span></span><br><span class="line">                <span class="keyword">return</span> self.get_matrix_solution(matrix[:row,:column])</span><br><span class="line">        <span class="keyword">return</span> self.get_matrix_solution(matrix[:row,:column])</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_solution</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> sorted(self.solution.items())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_update = EditDistance_update()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>step, matrix_ = test_update.edit_distance_with_matrix(<span class="string">'helool123'</span>, <span class="string">'welhel123lo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_update.get_matrix_solution(matrix_)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_update.get_solution()</span><br><span class="line"></span><br><span class="line">[(<span class="number">1</span>, <span class="string">'insert before str1.(0) with str2.(0)'</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="string">'insert before str1.(0) with str2.(1)'</span>),</span><br><span class="line"> (<span class="number">3</span>, <span class="string">'insert before str1.(0) with str2.(2)'</span>),</span><br><span class="line"> (<span class="number">4</span>, <span class="string">'delete str1.(3)'</span>),</span><br><span class="line"> (<span class="number">5</span>, <span class="string">'delete str1.(4)'</span>),</span><br><span class="line"> (<span class="number">6</span>, <span class="string">'delete str1.(5)'</span>),</span><br><span class="line"> (<span class="number">7</span>, <span class="string">'insert after str1.(8) with str2.(9)'</span>),</span><br><span class="line"> (<span class="number">8</span>, <span class="string">'insert after str1.(8) with str2.(10)'</span>)]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_update1 = EditDistance_update(<span class="literal">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>step, matrix_ = test_update1.edit_distance_with_matrix(<span class="string">'helool123'</span>, <span class="string">'welhel123lo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_update1.get_matrix_solution(matrix_)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_update1.get_solution()</span><br><span class="line"></span><br><span class="line">[(<span class="number">1</span>, <span class="string">'substitute str1.(0) with str2.(0)'</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="string">'substitute str1.(3) with str2.(3)'</span>),</span><br><span class="line"> (<span class="number">3</span>, <span class="string">'substitute str1.(4) with str2.(4)'</span>),</span><br><span class="line"> (<span class="number">4</span>, <span class="string">'insert after str1.(8) with str2.(9)'</span>),</span><br><span class="line"> (<span class="number">5</span>, <span class="string">'insert after str1.(8) with str2.(10)'</span>)]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2-Gram语言模型及基于模式匹配对话A.I的Python实现</title>
      <link href="/2019/07/16/2-Gram%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%9A%84Python%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/07/16/2-Gram%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%9A%84Python%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-基于概率统计的语言模型"><a href="#1-基于概率统计的语言模型" class="headerlink" title="1.基于概率统计的语言模型"></a>1.基于概率统计的语言模型</h3><blockquote><p>语义资料整理得到目标语言格式文本。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">content = pd.read_csv(<span class="string">'movie_comments.csv'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">content.head()</span><br><span class="line">articles = content[<span class="string">'comment'</span>].tolist()</span><br><span class="line"><span class="keyword">for</span> i, article <span class="keyword">in</span> enumerate(articles):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        new_article = re.findall(<span class="string">'\w+'</span>, article)</span><br><span class="line">        <span class="keyword">if</span> new_article:</span><br><span class="line">            articles[i] = <span class="string">''</span>.join(new_article)</span><br><span class="line">    <span class="keyword">except</span> TypeError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'movie_comment_pure.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> articles:</span><br><span class="line">        f.write(str(article) + <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>根据提取的语义资料获取<code>2-Gram</code>二元格式文本列表。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(jieba.cut(string))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">TOKEN_MOVIE = []</span><br><span class="line"><span class="keyword">for</span> i, line <span class="keyword">in</span> enumerate((open(<span class="string">'movie_comment_pure.txt'</span>, encoding=<span class="string">'utf-8'</span>))):</span><br><span class="line">    TOKEN_MOVIE = cut(line)</span><br><span class="line">TOKEN_MOVIE = [str(t) <span class="keyword">for</span> t <span class="keyword">in</span> TOKEN_MOVIE]</span><br><span class="line">TOKEN_2_MOVIE_GRAM = [<span class="string">''</span>.join(TOKEN_MOVIE[i:i+<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(TOKEN_MOVIE[:<span class="number">-2</span>]))]</span><br></pre></td></tr></table></figure><blockquote><ul><li>建立语言模型。</li><li>分母<code>length</code>不同论文有不同的取法。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">words_count = Counter(TOKEN_2_MOVIE_GRAM)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">probability_2_gram</span><span class="params">(w1, w2, token=TOKEN_2_MOVIE_GRAM)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return the possibility of w1w2 in token. </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    combine = w1+w2</span><br><span class="line">    length = len(token)</span><br><span class="line">    <span class="keyword">if</span> combine <span class="keyword">in</span> words_count:</span><br><span class="line">        <span class="keyword">return</span> words_count[combine] / length</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> / length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">language_model</span><span class="params">(sentence, token=TOKEN_2_MOVIE_GRAM)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return possibility of a sentence base on corpus we have.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    words = cut(sentence)   </span><br><span class="line">    sentence_pro = <span class="number">1</span> </span><br><span class="line">    <span class="keyword">for</span> i, word <span class="keyword">in</span> enumerate(words[:<span class="number">-1</span>]):</span><br><span class="line">        next_ = words[i+<span class="number">1</span>]</span><br><span class="line">        probability = probability_2_gram(word, next_, token)</span><br><span class="line">        sentence_pro *= probability</span><br><span class="line">    <span class="keyword">return</span> sentence_pro</span><br></pre></td></tr></table></figure><h3 id="2-对话双方句子语法构建"><a href="#2-对话双方句子语法构建" class="headerlink" title="2. 对话双方句子语法构建"></a>2. 对话双方句子语法构建</h3><blockquote><ul><li>此处构建的句子语法过于专业性，需要配合专门的语料进行可能性判断。</li><li>但是根据经验而言，这种专业性故障的产生并不和过往的故障率有强联系，比如很有可能出现以往没出现的故障，则这种语言模型无法派上用场，此处仅用来举例。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">client = <span class="string">'''</span></span><br><span class="line"><span class="string">client = 时间 地点 列车号 故障 结尾</span></span><br><span class="line"><span class="string">时间 = 今早 | 昨晚 | 昨天 | 检修时</span></span><br><span class="line"><span class="string">地点 = 库里 | 地铁站 | 牵引线</span></span><br><span class="line"><span class="string">地铁站 = 地铁站 | 岩内站 | 诚毅大街站 | 集美学村站 | 乌石浦站 | 园博苑站</span></span><br><span class="line"><span class="string">列车号 = 列车号 | TS001 | TS002 | TS003 | TS004 | TS005</span></span><br><span class="line"><span class="string">故障 = 故障 | 牵引封锁 | 辅助过温 | 受电弓异常 | 速传故障 | 高压系统故障</span></span><br><span class="line"><span class="string">结尾 = 。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">worker = <span class="string">'''</span></span><br><span class="line"><span class="string">worker = 人物 疑问 动作 处理 结尾</span></span><br><span class="line"><span class="string">人物 = 你们 | 其他供应商 | 检修班组</span></span><br><span class="line"><span class="string">疑问 = 有没有 | 是不是 | 是否</span></span><br><span class="line"><span class="string">动作 = 做过 | 干过 | 处理过 |</span></span><br><span class="line"><span class="string">处理 = 软件更新 | 硬件保养 | 系统校正 | 库内检修</span></span><br><span class="line"><span class="string">结尾 = ?</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><blockquote><p>语法的创建。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_grammar</span><span class="params">(grammar_str, split=<span class="string">'='</span>, line_split=<span class="string">'\n'</span>)</span>:</span></span><br><span class="line">    grammar = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> grammar_str.split(line_split):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line.strip(): </span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        exp, stmt = line.split(split)</span><br><span class="line">        grammar[exp.strip()] = [s.split() <span class="keyword">for</span> s <span class="keyword">in</span> stmt.split(<span class="string">'|'</span>)]</span><br><span class="line">    <span class="keyword">return</span> grammar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(gram, target)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> target <span class="keyword">not</span> <span class="keyword">in</span> gram:</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    expanded = [generate(gram ,t) <span class="keyword">for</span> t <span class="keyword">in</span> random.choice(gram[target])]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([e <span class="keyword">if</span> e != <span class="string">'/n'</span> <span class="keyword">else</span> <span class="string">'\n'</span> <span class="keyword">for</span> e <span class="keyword">in</span> expanded <span class="keyword">if</span> e != <span class="string">'null'</span>])</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_n</span><span class="params">(grammar_string=client_gram, target=<span class="string">'client'</span>,n=<span class="number">10</span>)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        result.append(generate(grammar_string, target))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">client_gram = create_grammar(client)</span><br><span class="line">worker_gram = create_grammar(worker)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>client_gram</span><br><span class="line">&#123;<span class="string">'client'</span>: [[<span class="string">'时间'</span>, <span class="string">'地点'</span>, <span class="string">'列车号'</span>, <span class="string">'故障'</span>, <span class="string">'结尾'</span>]],</span><br><span class="line"> <span class="string">'时间'</span>: [[<span class="string">'今早'</span>], [<span class="string">'昨晚'</span>], [<span class="string">'昨天'</span>], [<span class="string">'检修时'</span>]],</span><br><span class="line"> <span class="string">'地点'</span>: [[<span class="string">'库里'</span>], [<span class="string">'地铁站'</span>], [<span class="string">'牵引线'</span>]],</span><br><span class="line"> <span class="string">'地铁站'</span>: [[<span class="string">'地铁站'</span>], [<span class="string">'岩内站'</span>], [<span class="string">'诚毅大街站'</span>], [<span class="string">'集美学村站'</span>], [<span class="string">'乌石浦站'</span>], [<span class="string">'园博苑站'</span>]],</span><br><span class="line"> <span class="string">'列车号'</span>: [[<span class="string">'列车号'</span>], [<span class="string">'TS001'</span>], [<span class="string">'TS002'</span>], [<span class="string">'TS003'</span>], [<span class="string">'TS004'</span>], [<span class="string">'TS005'</span>]],</span><br><span class="line"> <span class="string">'故障'</span>: [[<span class="string">'故障'</span>], [<span class="string">'牵引封锁'</span>], [<span class="string">'辅助过温'</span>], [<span class="string">'受电弓异常'</span>], [<span class="string">'速传故障'</span>], [<span class="string">'高压系统故障'</span>]],</span><br><span class="line"> <span class="string">'结尾'</span>: [[<span class="string">'。'</span>]]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>worker_gram</span><br><span class="line">&#123;<span class="string">'worker'</span>: [[<span class="string">'人物'</span>, <span class="string">'疑问'</span>, <span class="string">'动作'</span>, <span class="string">'处理'</span>, <span class="string">'结尾'</span>]],</span><br><span class="line"> <span class="string">'人物'</span>: [[<span class="string">'你们'</span>], [<span class="string">'其他供应商'</span>], [<span class="string">'检修班组'</span>]],</span><br><span class="line"> <span class="string">'疑问'</span>: [[<span class="string">'有没有'</span>], [<span class="string">'是不是'</span>], [<span class="string">'是否'</span>]],</span><br><span class="line"> <span class="string">'动作'</span>: [[<span class="string">'做过'</span>], [<span class="string">'干过'</span>], [<span class="string">'处理过'</span>], []],</span><br><span class="line"> <span class="string">'处理'</span>: [[<span class="string">'软件更新'</span>], [<span class="string">'硬件保养'</span>], [<span class="string">'系统校正'</span>], [<span class="string">'库内检修'</span>]],</span><br><span class="line"> <span class="string">'结尾'</span>: [[<span class="string">'?'</span>]]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>generate(worker_gram, <span class="string">'worker'</span>)</span><br><span class="line"><span class="string">'你们是否做过系统校正?'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>generate_n()</span><br><span class="line">[<span class="string">'昨晚库里TS004牵引封锁。'</span>,</span><br><span class="line"> <span class="string">'检修时库里TS003受电弓异常。'</span>,</span><br><span class="line"> <span class="string">'今早乌石浦站TS005速传故障。'</span>,</span><br><span class="line"> <span class="string">'昨晚牵引线TS003辅助过温。'</span>,</span><br><span class="line"> <span class="string">'今早库里TS005受电弓异常。'</span>,</span><br><span class="line"> <span class="string">'昨天牵引线TS003高压系统故障。'</span>,</span><br><span class="line"> <span class="string">'昨晚牵引线TS004速传故障。'</span>,</span><br><span class="line"> <span class="string">'今早诚毅大街站TS005受电弓异常。'</span>,</span><br><span class="line"> <span class="string">'今早库里TS005受电弓异常。'</span>,</span><br><span class="line"> <span class="string">'昨晚牵引线TS005高压系统故障。'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language_model(<span class="string">'今天天气真好啊'</span>)</span><br><span class="line"><span class="number">1.4671030887566852e-10</span></span><br></pre></td></tr></table></figure><blockquote><p>语料库大小对句子概率结果的影响。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> sen <span class="keyword">in</span> generate_n(n=<span class="number">20</span>):</span><br><span class="line">        print(<span class="string">f"Condition: <span class="subst">&#123;sen&#125;</span> with probability: <span class="subst">&#123;language_model(sen, token=TOKEN_2_MOVIE_GRAM)&#125;</span>"</span>)</span><br><span class="line">    </span><br><span class="line">Condition: 检修时集美学村站TS002高压系统故障。 <span class="keyword">with</span> probability: <span class="number">9.486450616421968e-09</span></span><br><span class="line">Condition: 今早牵引线TS003受电弓异常。 <span class="keyword">with</span> probability: <span class="number">1.3281030862990755e-07</span></span><br><span class="line">Condition: 昨天牵引线TS001受电弓异常。 <span class="keyword">with</span> probability: <span class="number">1.3281030862990755e-07</span></span><br><span class="line">Condition: 昨晚集美学村站TS004受电弓异常。 <span class="keyword">with</span> probability: <span class="number">1.3281030862990755e-07</span></span><br><span class="line">Condition: 检修时诚毅大街站TS004高压系统故障。 <span class="keyword">with</span> probability: <span class="number">9.486450616421968e-09</span></span><br><span class="line">Condition: 昨晚集美学村站TS003速传故障。 <span class="keyword">with</span> probability: <span class="number">1.3281030862990755e-07</span></span><br><span class="line">Condition: 检修时牵引线TS003辅助过温。 <span class="keyword">with</span> probability: <span class="number">9.486450616421968e-09</span></span><br><span class="line">Condition: 昨晚库里TS001速传故障。 <span class="keyword">with</span> probability: <span class="number">1.859344320818706e-06</span></span><br><span class="line">Condition: 今早乌石浦站TS002受电弓异常。 <span class="keyword">with</span> probability: <span class="number">9.486450616421968e-09</span></span><br><span class="line">Condition: 今早牵引线TS002高压系统故障。 <span class="keyword">with</span> probability: <span class="number">1.3281030862990755e-07</span></span><br><span class="line">Condition: 昨天乌石浦站TS003牵引封锁。 <span class="keyword">with</span> probability: <span class="number">9.486450616421968e-09</span></span><br><span class="line">Condition: 今早岩内站TS004高压系统故障。 <span class="keyword">with</span> probability: <span class="number">1.3281030862990755e-07</span></span><br><span class="line">Condition: 昨晚库里TS005高压系统故障。 <span class="keyword">with</span> probability: <span class="number">1.859344320818706e-06</span></span><br><span class="line">Condition: 昨天牵引线TS005牵引封锁。 <span class="keyword">with</span> probability: <span class="number">1.3281030862990755e-07</span></span><br><span class="line">Condition: 昨天乌石浦站TS004牵引封锁。 <span class="keyword">with</span> probability: <span class="number">9.486450616421968e-09</span></span><br><span class="line">Condition: 检修时集美学村站TS003受电弓异常。 <span class="keyword">with</span> probability: <span class="number">9.486450616421968e-09</span></span><br><span class="line">Condition: 今早库里TS003受电弓异常。 <span class="keyword">with</span> probability: <span class="number">1.859344320818706e-06</span></span><br><span class="line">Condition: 昨晚园博苑站TS004速传故障。 <span class="keyword">with</span> probability: <span class="number">1.3281030862990755e-07</span></span><br><span class="line">Condition: 昨晚牵引线TS003高压系统故障。 <span class="keyword">with</span> probability: <span class="number">1.3281030862990755e-07</span></span><br><span class="line">Condition: 检修时集美学村站TS004受电弓异常。 <span class="keyword">with</span> probability: <span class="number">9.486450616421968e-09</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> sen <span class="keyword">in</span> generate_n(n=<span class="number">20</span>):</span><br><span class="line">        print(<span class="string">f"Condition: <span class="subst">&#123;sen&#125;</span> with probability: <span class="subst">&#123;language_model(sen, token=TOKEN_2_another</span></span></span><br><span class="line"><span class="string"><span class="subst">        _GRAM)&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">Condition: 昨天牵引线TS004高压系统故障。 <span class="keyword">with</span> probability: <span class="number">3.157780178309664e-30</span></span><br><span class="line">Condition: 昨天岩内站TS001速传故障。 <span class="keyword">with</span> probability: <span class="number">3.157780178309664e-30</span></span><br><span class="line">Condition: 检修时库里TS005高压系统故障。 <span class="keyword">with</span> probability: <span class="number">3.157780178309664e-30</span></span><br><span class="line">Condition: 昨天库里TS004受电弓异常。 <span class="keyword">with</span> probability: <span class="number">2.607063315212459e-25</span></span><br><span class="line">Condition: 检修时库里TS002牵引封锁。 <span class="keyword">with</span> probability: <span class="number">3.157780178309664e-30</span></span><br><span class="line">Condition: 今早牵引线TS001速传故障。 <span class="keyword">with</span> probability: <span class="number">3.157780178309664e-30</span></span><br><span class="line">Condition: 昨晚牵引线TS005速传故障。 <span class="keyword">with</span> probability: <span class="number">3.157780178309664e-30</span></span><br><span class="line">Condition: 昨天库里TS001受电弓异常。 <span class="keyword">with</span> probability: <span class="number">2.607063315212459e-25</span></span><br><span class="line">Condition: 昨天库里TS001高压系统故障。 <span class="keyword">with</span> probability: <span class="number">2.607063315212459e-25</span></span><br><span class="line">Condition: 检修时牵引线TS002速传故障。 <span class="keyword">with</span> probability: <span class="number">3.824830642332442e-35</span></span><br><span class="line">Condition: 今早牵引线TS003高压系统故障。 <span class="keyword">with</span> probability: <span class="number">3.157780178309664e-30</span></span><br><span class="line">Condition: 检修时牵引线TS004速传故障。 <span class="keyword">with</span> probability: <span class="number">3.824830642332442e-35</span></span><br><span class="line">Condition: 检修时库里TS003牵引封锁。 <span class="keyword">with</span> probability: <span class="number">3.157780178309664e-30</span></span><br><span class="line">Condition: 昨晚库里TS005高压系统故障。 <span class="keyword">with</span> probability: <span class="number">2.607063315212459e-25</span></span><br><span class="line">Condition: 今早乌石浦站TS002牵引封锁。 <span class="keyword">with</span> probability: <span class="number">3.824830642332442e-35</span></span><br><span class="line">Condition: 昨天集美学村站TS005高压系统故障。 <span class="keyword">with</span> probability: <span class="number">3.157780178309664e-30</span></span><br><span class="line">Condition: 今早牵引线TS003辅助过温。 <span class="keyword">with</span> probability: <span class="number">3.157780178309664e-30</span></span><br><span class="line">Condition: 昨晚库里TS004高压系统故障。 <span class="keyword">with</span> probability: <span class="number">2.607063315212459e-25</span></span><br><span class="line">Condition: 检修时牵引线TS005牵引封锁。 <span class="keyword">with</span> probability: <span class="number">3.824830642332442e-35</span></span><br><span class="line">Condition: 检修时集美学村站TS004辅助过温。 <span class="keyword">with</span> probability: <span class="number">3.824830642332442e-35</span></span><br></pre></td></tr></table></figure><blockquote><p>根据句子概率生成最优回应。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_best</span><span class="params">(grammar_string=client_gram, language_model=language_model, n=<span class="number">20</span>)</span>:</span></span><br><span class="line">    sentences = generate_n(grammar_string=grammar_string, n=n)</span><br><span class="line">    probability = list(map(language_model, sentences))</span><br><span class="line">    result = sorted(list(zip(sentences, probability)), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    print(<span class="string">f"The most probability condition is : <span class="subst">&#123;result[<span class="number">0</span>][<span class="number">0</span>]&#125;</span> with probability: <span class="subst">&#123;result[<span class="number">0</span>][<span class="number">1</span>]&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>generate_best()</span><br><span class="line">The most probability condition <span class="keyword">is</span> : 昨晚库里TS001速传故障。 <span class="keyword">with</span> probability: <span class="number">1.859344320818706e-06</span></span><br><span class="line">[(<span class="string">'昨晚库里TS001速传故障。'</span>, <span class="number">1.859344320818706e-06</span>),</span><br><span class="line"> (<span class="string">'今早库里TS001高压系统故障。'</span>, <span class="number">1.859344320818706e-06</span>),</span><br><span class="line"> (<span class="string">'昨晚库里TS004速传故障。'</span>, <span class="number">1.859344320818706e-06</span>),</span><br><span class="line"> (<span class="string">'昨晚库里TS005高压系统故障。'</span>, <span class="number">1.859344320818706e-06</span>),</span><br><span class="line"> (<span class="string">'昨晚库里TS003辅助过温。'</span>, <span class="number">1.859344320818706e-06</span>),</span><br><span class="line"> (<span class="string">'昨天库里TS001速传故障。'</span>, <span class="number">1.859344320818706e-06</span>),</span><br><span class="line"> (<span class="string">'今早牵引线TS002速传故障。'</span>, <span class="number">1.3281030862990755e-07</span>),</span><br><span class="line"> (<span class="string">'昨天牵引线TS001牵引封锁。'</span>, <span class="number">1.3281030862990755e-07</span>),</span><br><span class="line"> (<span class="string">'今早牵引线TS002受电弓异常。'</span>, <span class="number">1.3281030862990755e-07</span>),</span><br><span class="line"> (<span class="string">'昨晚牵引线TS004受电弓异常。'</span>, <span class="number">1.3281030862990755e-07</span>),</span><br><span class="line"> (<span class="string">'昨晚牵引线TS004牵引封锁。'</span>, <span class="number">1.3281030862990755e-07</span>),</span><br><span class="line"> (<span class="string">'检修时库里TS004高压系统故障。'</span>, <span class="number">1.3281030862990755e-07</span>),</span><br><span class="line"> (<span class="string">'昨晚集美学村站TS002辅助过温。'</span>, <span class="number">1.3281030862990755e-07</span>),</span><br><span class="line"> (<span class="string">'昨晚牵引线TS001受电弓异常。'</span>, <span class="number">1.3281030862990755e-07</span>),</span><br><span class="line"> (<span class="string">'昨晚牵引线TS005牵引封锁。'</span>, <span class="number">1.3281030862990755e-07</span>),</span><br><span class="line"> (<span class="string">'今早岩内站TS003牵引封锁。'</span>, <span class="number">1.3281030862990755e-07</span>),</span><br><span class="line"> (<span class="string">'检修时库里TS002辅助过温。'</span>, <span class="number">1.3281030862990755e-07</span>),</span><br><span class="line"> (<span class="string">'检修时园博苑站TS001受电弓异常。'</span>, <span class="number">9.486450616421968e-09</span>),</span><br><span class="line"> (<span class="string">'检修时集美学村站TS001高压系统故障。'</span>, <span class="number">9.486450616421968e-09</span>),</span><br><span class="line"> (<span class="string">'昨晚乌石浦站TS002辅助过温。'</span>, <span class="number">9.486450616421968e-09</span>)]</span><br></pre></td></tr></table></figure><h3 id="3-基于模式匹配的对话机器人"><a href="#3-基于模式匹配的对话机器人" class="headerlink" title="3.基于模式匹配的对话机器人"></a>3.基于模式匹配的对话机器人</h3><blockquote><p>目标。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_response(<span class="string">'我讨厌他'</span>)</span><br><span class="line"><span class="string">'他有什么不好呢?'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_response(<span class="string">'他妈妈很贤惠'</span>)</span><br><span class="line"><span class="string">'你家里除了很贤惠还有谁?'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_response(<span class="string">'难道所有人都这样么？'</span>)</span><br><span class="line"><span class="string">'我确定不是人人都是'</span></span><br></pre></td></tr></table></figure><blockquote><p>匹配变量。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_variable</span><span class="params">(pat)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> pat.startswith(<span class="string">'?'</span>) <span class="keyword">and</span> all(s.isalpha() <span class="keyword">for</span> s <span class="keyword">in</span> pat[<span class="number">1</span>:])</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pat_match</span><span class="params">(pattern, saying)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> pattern <span class="keyword">or</span> <span class="keyword">not</span> saying: <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">if</span> is_variable(pattern[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">return</span> [(pattern[<span class="number">0</span>], saying[<span class="number">0</span>])] + pat_match(pattern[<span class="number">1</span>:], saying[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> pattern[<span class="number">0</span>] != saying[<span class="number">0</span>]: <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> pat_match(pattern[<span class="number">1</span>:], saying[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pat_match(<span class="string">'I want ?X'</span>.split(), <span class="string">"I want holiday"</span>.split())</span><br><span class="line">(<span class="string">'?X'</span>, <span class="string">'holiday'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pat_match(<span class="string">"?X greater than ?Y"</span>.split(), <span class="string">"3 greater than 2"</span>.split())</span><br><span class="line">[(<span class="string">'?X'</span>, <span class="string">'3'</span>), (<span class="string">'?Y'</span>, <span class="string">'2'</span>)]</span><br></pre></td></tr></table></figure><blockquote><p>基于模板替换变量。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pat_to_dict</span><span class="params">(patterns)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> patterns&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">substitute</span><span class="params">(rule, parsed_rules)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> rule: <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">return</span> [parsed_rules.get(rule[<span class="number">0</span>], rule[<span class="number">0</span>])] + substitute(rule[<span class="number">1</span>:], parsed_rules)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">defined_patterns = &#123;</span><br><span class="line">    <span class="string">"I need ?X"</span>: [<span class="string">"Image you will get ?X soon"</span>, <span class="string">"Why do you need ?X ?"</span>], </span><br><span class="line">    <span class="string">"My ?X told me something"</span>: [<span class="string">"Talk about more about your ?X"</span>, <span class="string">"How do you think about your ?X ?"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response</span><span class="params">(saying)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> defined_patterns.items():</span><br><span class="line">        t = pat_match(k.split(), saying.split())</span><br><span class="line">        <span class="keyword">if</span> t:</span><br><span class="line">            result = t, v</span><br><span class="line">    dictionary = pat_to_dict(result[<span class="number">0</span>])</span><br><span class="line">    answer = random.choice(result[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">' '</span>.join(substitute(answer.split(), dictionary))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>got_patterns = pat_match(<span class="string">"I want ?X"</span>.split(), <span class="string">"I want iPhone"</span>.split())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' '</span>.join(substitute(<span class="string">"What if you mean if you got a ?X"</span>.split(), pat_to_dict(got_patterns)))</span><br><span class="line"><span class="string">'What if you mean if you got a iPhone'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_response(<span class="string">'I need iPhone'</span>)</span><br><span class="line"><span class="string">'Why do you need iPhone ?'</span></span><br></pre></td></tr></table></figure><blockquote><p>多词(*)匹配。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pat_to_dict</span><span class="params">(patterns)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;k: <span class="string">' '</span>.join(v) <span class="keyword">if</span> isinstance(v, list) <span class="keyword">else</span> v <span class="keyword">for</span> k, v <span class="keyword">in</span> patterns&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pattern_segment</span><span class="params">(pattern)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> pattern.startswith(<span class="string">'?*'</span>) <span class="keyword">and</span> all(a.isalpha() <span class="keyword">for</span> a <span class="keyword">in</span> pattern[<span class="number">2</span>:])</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_match</span><span class="params">(rest, saying)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> rest <span class="keyword">and</span> <span class="keyword">not</span> saying:</span><br><span class="line">        <span class="comment"># rest == saying</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all(a.isalpha() <span class="keyword">for</span> a <span class="keyword">in</span> rest[<span class="number">0</span>]):</span><br><span class="line">        <span class="comment"># reach another ?* and out</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> rest[<span class="number">0</span>] != saying[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> is_match(rest[<span class="number">1</span>:], saying[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">segment_match</span><span class="params">(pattern, saying)</span>:</span></span><br><span class="line">    <span class="string">"""Match as long as pattern goes."""</span></span><br><span class="line">    seg_pat, rest = pattern[<span class="number">0</span>], pattern[<span class="number">1</span>:]</span><br><span class="line">    seg_pat = seg_pat.replace(<span class="string">'?*'</span>, <span class="string">'?'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> rest:</span><br><span class="line">        <span class="keyword">return</span> (seg_pat, saying), len(saying)</span><br><span class="line">    <span class="keyword">for</span> i, token <span class="keyword">in</span> enumerate(saying):</span><br><span class="line">        <span class="comment"># Modify condition like pat_match_with_seg('?*X hello'.split(), 'hi hello you'.split()) raise an index error.</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> rest[<span class="number">0</span>] == token <span class="keyword">and</span> is_match(rest[<span class="number">1</span>:], saying[(i + <span class="number">1</span>):]):</span><br><span class="line">                <span class="keyword">return</span> (seg_pat, saying[:i]), i</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            <span class="keyword">return</span> (seg_pat, saying[:i]), i</span><br><span class="line">    <span class="keyword">return</span> (seg_pat, saying), len(saying)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">fail = [<span class="literal">True</span>, <span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pat_match_with_seg</span><span class="params">(pattern, saying)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> pattern <span class="keyword">or</span> <span class="keyword">not</span> saying: <span class="keyword">return</span> []</span><br><span class="line">    </span><br><span class="line">    pat = pattern[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> is_variable(pat):</span><br><span class="line">        <span class="keyword">return</span> [(pat, saying[<span class="number">0</span>])] + pat_match_with_seg(pattern[<span class="number">1</span>:], saying[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">elif</span> is_pattern_segment(pat):</span><br><span class="line">        match, index = segment_match(pattern, saying)</span><br><span class="line">        t = pat_match_with_seg(pattern[<span class="number">1</span>:], saying[index:])</span><br><span class="line">        <span class="keyword">return</span> [match] + t <span class="keyword">if</span> match[<span class="number">0</span>][<span class="number">1</span>] <span class="keyword">else</span> t</span><br><span class="line">    <span class="keyword">elif</span> pat == saying[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">return</span> pat_match_with_seg(pattern[<span class="number">1</span>:], saying[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fail</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pat_match_with_seg(<span class="string">'?*X hello ?*Y'</span>.split(), <span class="string">'hi hello you are very handsome'</span>.split())</span><br><span class="line">[(<span class="string">'?X'</span>, [<span class="string">'hi'</span>]), (<span class="string">'?Y'</span>, [<span class="string">'you'</span>, <span class="string">'are'</span>, <span class="string">'very'</span>, <span class="string">'handsome'</span>])]</span><br></pre></td></tr></table></figure><blockquote><p>中英文模板。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">rule_responses = &#123;</span><br><span class="line">    <span class="string">'?*x hello ?*y'</span>: [<span class="string">'How do you do'</span>, <span class="string">'Please state your problem'</span>],</span><br><span class="line">    <span class="string">'?*x I want ?*y'</span>: [<span class="string">'what would it mean if you got ?y'</span>, <span class="string">'Why do you want ?y'</span>, <span class="string">'Suppose you got ?y soon'</span>],</span><br><span class="line">    <span class="string">'?*x if ?*y'</span>: [<span class="string">'Do you really think its likely that ?y'</span>, <span class="string">'Do you wish that ?y'</span>, <span class="string">'What do you think about ?y'</span>, <span class="string">'Really-- if ?y'</span>],</span><br><span class="line">    <span class="string">'?*x no ?*y'</span>: [<span class="string">'why not?'</span>, <span class="string">'You are being a negative'</span>, <span class="string">'Are you saying \'No\' just to be negative?'</span>],</span><br><span class="line">    <span class="string">'?*x I was ?*y'</span>: [<span class="string">'Were you really'</span>, <span class="string">'Perhaps I already knew you were ?y'</span>, <span class="string">'Why do you tell me you were ?y now?'</span>],</span><br><span class="line">    <span class="string">'?*x I feel ?*y'</span>: [<span class="string">'Do you often feel ?y ?'</span>, <span class="string">'What other feelings do you have?'</span>],</span><br><span class="line">    <span class="string">'?*x你好?*y'</span>: [<span class="string">'你好呀'</span>, <span class="string">'请告诉我你的问题'</span>],</span><br><span class="line">    <span class="string">'?*x我想?*y'</span>: [<span class="string">'你觉得?y有什么意义呢？'</span>, <span class="string">'为什么你想?y'</span>, <span class="string">'你可以想想你很快就可以?y了'</span>],</span><br><span class="line">    <span class="string">'?*x我想要?*y'</span>: [<span class="string">'?x想问你，你觉得?y有什么意义呢?'</span>, <span class="string">'为什么你想?y'</span>, <span class="string">'?x觉得... 你可以想想你很快就可以有?y了'</span>, <span class="string">'你看?x像?y不'</span>, <span class="string">'我看你就像?y'</span>],</span><br><span class="line">    <span class="string">'?*x喜欢?*y'</span>: [<span class="string">'喜欢?y的哪里？'</span>, <span class="string">'?y有什么好的呢？'</span>, <span class="string">'你想要?y吗？'</span>],</span><br><span class="line">    <span class="string">'?*x讨厌?*y'</span>: [<span class="string">'?y怎么会那么讨厌呢?'</span>, <span class="string">'讨厌?y的哪里？'</span>, <span class="string">'?y有什么不好呢？'</span>, <span class="string">'你不想要?y吗？'</span>],</span><br><span class="line">    <span class="string">'?*xAI?*y'</span>: [<span class="string">'你为什么要提AI的事情？'</span>, <span class="string">'你为什么觉得AI要解决你的问题？'</span>],</span><br><span class="line">    <span class="string">'?*x机器人?*y'</span>: [<span class="string">'你为什么要提机器人的事情？'</span>, <span class="string">'你为什么觉得机器人要解决你的问题？'</span>],</span><br><span class="line">    <span class="string">'?*x对不起?*y'</span>: [<span class="string">'不用道歉'</span>, <span class="string">'你为什么觉得你需要道歉呢?'</span>],</span><br><span class="line">    <span class="string">'?*x我记得?*y'</span>: [<span class="string">'你经常会想起这个吗？'</span>, <span class="string">'除了?y你还会想起什么吗？'</span>, <span class="string">'你为什么和我提起?y'</span>],</span><br><span class="line">    <span class="string">'?*x如果?*y'</span>: [<span class="string">'你真的觉得?y会发生吗？'</span>, <span class="string">'你希望?y吗?'</span>, <span class="string">'真的吗？如果?y的话'</span>, <span class="string">'关于?y你怎么想？'</span>],</span><br><span class="line">    <span class="string">'?*x我?*z梦见?*y'</span>:[<span class="string">'真的吗? --- ?y'</span>, <span class="string">'你在醒着的时候，以前想象过?y吗？'</span>, <span class="string">'你以前梦见过?y吗'</span>],</span><br><span class="line">    <span class="string">'?*x妈妈?*y'</span>: [<span class="string">'你家里除了?y还有谁?'</span>, <span class="string">'嗯嗯，多说一点和你家里有关系的'</span>, <span class="string">'她对你影响很大吗？'</span>],</span><br><span class="line">    <span class="string">'?*x爸爸?*y'</span>: [<span class="string">'你家里除了?y还有谁?'</span>, <span class="string">'嗯嗯，多说一点和你家里有关系的'</span>, <span class="string">'他对你影响很大吗？'</span>, <span class="string">'每当你想起你爸爸的时候， 你还会想起其他的吗?'</span>],</span><br><span class="line">    <span class="string">'?*x我愿意?*y'</span>: [<span class="string">'我可以帮你?y吗？'</span>, <span class="string">'你可以解释一下，为什么想?y'</span>],</span><br><span class="line">    <span class="string">'?*x我很难过，因为?*y'</span>: [<span class="string">'我听到你这么说， 也很难过'</span>, <span class="string">'?y不应该让你这么难过的'</span>],</span><br><span class="line">    <span class="string">'?*x难过?*y'</span>: [<span class="string">'我听到你这么说， 也很难过'</span>,</span><br><span class="line">                 <span class="string">'不应该让你这么难过的，你觉得你拥有什么，就会不难过?'</span>,</span><br><span class="line">                 <span class="string">'你觉得事情变成什么样，你就不难过了?'</span>],</span><br><span class="line">    <span class="string">'?*x就像?*y'</span>: [<span class="string">'你觉得?x和?y有什么相似性？'</span>, <span class="string">'?x和?y真的有关系吗？'</span>, <span class="string">'怎么说？'</span>],</span><br><span class="line">    <span class="string">'?*x和?*y都?*z'</span>: [<span class="string">'你觉得?z有什么问题吗?'</span>, <span class="string">'?z会对你有什么影响呢?'</span>],</span><br><span class="line">    <span class="string">'?*x和?*y一样?*z'</span>: [<span class="string">'你觉得?z有什么问题吗?'</span>, <span class="string">'?z会对你有什么影响呢?'</span>],</span><br><span class="line">    <span class="string">'?*x我是?*y'</span>: [<span class="string">'真的吗？'</span>, <span class="string">'?x想告诉你，或许我早就知道你是?y'</span>, <span class="string">'你为什么现在才告诉我你是?y'</span>],</span><br><span class="line">    <span class="string">'?*x我是?*y吗'</span>: [<span class="string">'如果你是?y会怎么样呢？'</span>, <span class="string">'你觉得你是?y吗'</span>, <span class="string">'如果你是?y，那意味着什么?'</span>],</span><br><span class="line">    <span class="string">'?*x你是?*y吗'</span>:  [<span class="string">'你为什么会对我是不是?y感兴趣?'</span>, <span class="string">'那你希望我是?y吗'</span>, <span class="string">'你要是喜欢， 我就会是?y'</span>],</span><br><span class="line">    <span class="string">'?*x你是?*y'</span> : [<span class="string">'为什么你觉得我是?y'</span>],</span><br><span class="line">    <span class="string">'?*x因为?*y'</span> : [<span class="string">'?y是真正的原因吗？'</span>, <span class="string">'你觉得会有其他原因吗?'</span>],</span><br><span class="line">    <span class="string">'?*x我不能?*y'</span>: [<span class="string">'你或许现在就能?y'</span>, <span class="string">'如果你能?y,会怎样呢？'</span>],</span><br><span class="line">    <span class="string">'?*x我觉得?*y'</span>: [<span class="string">'你经常这样感觉吗？'</span>, <span class="string">'除了到这个，你还有什么其他的感觉吗？'</span>],</span><br><span class="line">    <span class="string">'?*x我?*y你?*z'</span>: [<span class="string">'其实很有可能我们互相?y'</span>],</span><br><span class="line">    <span class="string">'?*x你为什么不?*y'</span>: [<span class="string">'你自己为什么不?y'</span>, <span class="string">'你觉得我不会?y'</span>, <span class="string">'等我心情好了，我就?y'</span>],</span><br><span class="line">    <span class="string">'?*x好的?*y'</span>: [<span class="string">'好的'</span>, <span class="string">'你是一个很正能量的人'</span>],</span><br><span class="line">    <span class="string">'?*x嗯嗯?*y'</span>: [<span class="string">'好的'</span>, <span class="string">'你是一个很正能量的人'</span>],</span><br><span class="line">    <span class="string">'?*x不嘛?*y'</span>: [<span class="string">'为什么不？'</span>, <span class="string">'你有一点负能量'</span>, <span class="string">'你说 不，是想表达不想的意思吗？'</span>],</span><br><span class="line">    <span class="string">'?*x不要?*y'</span>: [<span class="string">'为什么不？'</span>, <span class="string">'你有一点负能量'</span>, <span class="string">'你说 不，是想表达不想的意思吗？'</span>],</span><br><span class="line">    <span class="string">'?*x有些人?*y'</span>: [<span class="string">'具体是哪些人呢?'</span>],</span><br><span class="line">    <span class="string">'?*x有的人?*y'</span>: [<span class="string">'具体是哪些人呢?'</span>],</span><br><span class="line">    <span class="string">'?*x某些人?*y'</span>: [<span class="string">'具体是哪些人呢?'</span>],</span><br><span class="line">    <span class="string">'?*x每个人?*y'</span>: [<span class="string">'我确定不是人人都是'</span>, <span class="string">'你能想到一点特殊情况吗？'</span>, <span class="string">'例如谁？'</span>, <span class="string">'你看到的其实只是一小部分人'</span>],</span><br><span class="line">    <span class="string">'?*x所有人?*y'</span>: [<span class="string">'我确定不是人人都是'</span>, <span class="string">'你能想到一点特殊情况吗？'</span>, <span class="string">'例如谁？'</span>, <span class="string">'你看到的其实只是一小部分人'</span>],</span><br><span class="line">    <span class="string">'?*x总是?*y'</span>: [<span class="string">'你能想到一些其他情况吗?'</span>, <span class="string">'例如什么时候?'</span>, <span class="string">'你具体是说哪一次？'</span>, <span class="string">'真的---总是吗？'</span>],</span><br><span class="line">    <span class="string">'?*x一直?*y'</span>: [<span class="string">'你能想到一些其他情况吗?'</span>, <span class="string">'例如什么时候?'</span>, <span class="string">'你具体是说哪一次？'</span>, <span class="string">'真的---总是吗？'</span>],</span><br><span class="line">    <span class="string">'?*x或许?*y'</span>: [<span class="string">'你看起来不太确定'</span>],</span><br><span class="line">    <span class="string">'?*x可能?*y'</span>: [<span class="string">'你看起来不太确定'</span>],</span><br><span class="line">    <span class="string">'?*x他们是?*y吗？'</span>: [<span class="string">'你觉得他们可能不是?y？'</span>],</span><br><span class="line">    <span class="string">'?*x'</span>: [<span class="string">'很有趣'</span>, <span class="string">'请继续'</span>, <span class="string">'我不太确定我很理解你说的, 能稍微详细解释一下吗?'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取对话1(英文)。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response_star</span><span class="params">(saying, response_rules=rule_responses)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> question, answer <span class="keyword">in</span> response_rules.items():</span><br><span class="line">        temp = pat_match_with_seg(question.split(), saying.split())</span><br><span class="line">        <span class="keyword">if</span> len(temp) &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="literal">None</span> <span class="keyword">not</span> <span class="keyword">in</span> temp:</span><br><span class="line">            result = substitute(random.choice(answer).split(), pat_to_dict(temp))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        <span class="keyword">return</span> random.choice(response_rules[<span class="string">'?*x'</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">' '</span>.join(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_response_star(<span class="string">'sir hello you'</span>)</span><br><span class="line"><span class="string">'Please state your problem'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_response_star(<span class="string">'honey I feel terrible'</span>)</span><br><span class="line"><span class="string">'What other feelings do you have?'</span></span><br></pre></td></tr></table></figure><blockquote><p>获取对话2(中文)。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_split</span><span class="params">(string)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    temp = list(jieba.cut(string))</span><br><span class="line">    <span class="keyword">for</span> i, each <span class="keyword">in</span> enumerate(temp):</span><br><span class="line">        <span class="keyword">if</span> each == <span class="string">'?'</span>:</span><br><span class="line">            <span class="keyword">if</span> len(temp) == i + <span class="number">1</span>:</span><br><span class="line">                result.append(each)</span><br><span class="line">            <span class="keyword">elif</span> temp[i + <span class="number">1</span>] == <span class="string">'*'</span>:</span><br><span class="line">                result.append(temp[i] + temp[i + <span class="number">1</span>] + temp[i + <span class="number">2</span>])</span><br><span class="line">            <span class="keyword">elif</span> temp[i + <span class="number">1</span>].isalpha():</span><br><span class="line">                result.append(temp[i] + temp[i + <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">elif</span> len(each) == <span class="number">1</span> <span class="keyword">and</span> (each == <span class="string">'*'</span> <span class="keyword">or</span> each.isupper() <span class="keyword">or</span> each.islower()):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> each != <span class="string">' '</span>:</span><br><span class="line">            result.append(each)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response_star_new</span><span class="params">(saying, response_rules=rule_responses)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    last = []</span><br><span class="line">    <span class="keyword">for</span> question, answer <span class="keyword">in</span> response_rules.items():</span><br><span class="line"></span><br><span class="line">        temp = pat_match_with_seg(new_split(question), new_split(saying))</span><br><span class="line">        <span class="comment"># pop the ('?x", '') tuple in the pattern match list.</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> temp:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> v:</span><br><span class="line">                temp.pop(temp.index((k, v)))</span><br><span class="line">        <span class="keyword">if</span> len(temp) &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="literal">None</span> <span class="keyword">not</span> <span class="keyword">in</span> temp:</span><br><span class="line">            result = substitute(new_split(random.choice(answer)), pat_to_dict(temp))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        <span class="keyword">return</span> random.choice(response_rules[<span class="string">'?*x'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> result:</span><br><span class="line">        last.append(<span class="string">''</span>.join(each.split()))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(last)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_response_star_new(<span class="string">'他可能很厉害'</span>)</span><br><span class="line"><span class="string">'你看起来不太确定'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_response_star_new(<span class="string">'你一直这么干'</span>)</span><br><span class="line"><span class="string">'你能想到一些其他情况吗?'</span></span><br></pre></td></tr></table></figure><blockquote><p>其他版本，适应更多模式匹配。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response_star_new_v2</span><span class="params">(saying, response_rules=rule_responses)</span>:</span></span><br><span class="line">    patterns = response_rules.keys()</span><br><span class="line">    result = []</span><br><span class="line">    last = []</span><br><span class="line">    saying_list = [saying] * len(patterns)</span><br><span class="line">    set_saying_list = list(map(set, list(map(new_split, saying_list))))</span><br><span class="line">    set_pattern_list = list(map(set, list(map(new_split, list(patterns)))))</span><br><span class="line">    union_best_pattern = list(map(<span class="keyword">lambda</span> x, y: x &amp; y, set_saying_list, set_pattern_list))</span><br><span class="line"></span><br><span class="line">    best_pattern = set_pattern_list[union_best_pattern.index(max(union_best_pattern))]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> response_rules.items():</span><br><span class="line">        <span class="keyword">if</span> set(new_split(k)) == best_pattern:</span><br><span class="line">            temp = pat_match_with_seg(new_split(k), new_split(saying))</span><br><span class="line">            result = substitute(new_split(random.choice(v)), pat_to_dict(temp))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        <span class="keyword">return</span> random.choice(response_rules[<span class="string">'?*x'</span>])</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> result:</span><br><span class="line">        last.append(<span class="string">''</span>.join(each.split()))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(last)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response_star_new_v3</span><span class="params">(saying, response_rules=rule_responses)</span>:</span></span><br><span class="line">    patterns = response_rules.keys()</span><br><span class="line">    result = []</span><br><span class="line">    last = []</span><br><span class="line">    saying_list = [saying] * len(patterns)</span><br><span class="line">    set_saying_list = list(map(set, list(map(new_split, saying_list))))</span><br><span class="line">    set_pattern_list = list(map(set, list(map(new_split, list(patterns)))))</span><br><span class="line">    union_best_pattern = list(map(<span class="keyword">lambda</span> x, y: x &amp; y, set_saying_list, set_pattern_list))</span><br><span class="line">    <span class="comment"># 此处union_best_pattern中的中文两个词若被jieba分词成一个词，如“讨厌”, 则会判定成一个词，会出现和其他</span></span><br><span class="line">    <span class="comment"># 单个匹配的高频词如“我”等雷同，导致模式被该种模式截获</span></span><br><span class="line">    temp_union_1 = list(map(list, union_best_pattern))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_max</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(x[<span class="number">0</span>]) <span class="keyword">if</span> x <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    temp_union_2 = set(max(temp_union_1, key=get_max))</span><br><span class="line">    best_pattern = set_pattern_list[union_best_pattern.index(temp_union_2)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> response_rules.items():</span><br><span class="line">        <span class="keyword">if</span> set(new_split(k)) == best_pattern:</span><br><span class="line">            temp = pat_match_with_seg(new_split(k), new_split(saying))</span><br><span class="line">            result = substitute(new_split(random.choice(v)), pat_to_dict(temp))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        <span class="keyword">return</span> random.choice(response_rules[<span class="string">'?*x'</span>])</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> result:</span><br><span class="line">        last.append(<span class="string">''</span>.join(each.split()))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(last)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_response_star_new_v2(<span class="string">'天哪我不能这样'</span>)</span><br><span class="line"><span class="string">'如果你能这样,会怎样呢？'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_response_star_new_v2(<span class="string">'昨晚我在梦里梦见他们了'</span>)</span><br><span class="line"><span class="string">'你以前梦见过他们了吗'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_response_star_new_v3(<span class="string">'我真的喜欢这里'</span>)</span><br><span class="line"><span class="string">'你想要这里吗？'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_response_star_new_v3(<span class="string">'我讨厌他'</span>)</span><br><span class="line"><span class="string">'讨厌他的哪里？'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> NLP </category>
          
          <category> 智能系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性回归模型的Python实现</title>
      <link href="/2019/07/15/%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B%E7%9A%84Python%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/07/15/%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B%E7%9A%84Python%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-随机性选择-theta-0-和-theta-1"><a href="#1-随机性选择-theta-0-和-theta-1" class="headerlink" title="1.随机性选择$\theta_0$和$\theta_1$"></a>1.随机性选择$\theta_0$和$\theta_1$</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"></span><br><span class="line">data = load_boston()</span><br><span class="line">X_rm = data[<span class="string">'data'</span>][:, <span class="number">5</span>]</span><br><span class="line">Y = data[<span class="string">'target'</span>]</span><br><span class="line">theta_0 = <span class="number">100</span></span><br><span class="line">theta_1 = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">min_loss = float(<span class="string">'inf'</span>)</span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    y_hat = X_rm * theta_1 + theta_0</span><br><span class="line">    current_loss = np.sum(np.square(Y - y_hat)) / len(Y)</span><br><span class="line">    <span class="keyword">if</span> min_loss &gt; current_loss:</span><br><span class="line">        flag =<span class="number">0</span> <span class="keyword">if</span> min_loss - current_loss &lt; <span class="number">.001</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        min_loss = current_loss</span><br><span class="line">        best_theta_1, best_theta_0 = theta_1, theta_0</span><br><span class="line">    </span><br><span class="line">    theta_0 = random.random() * <span class="number">200</span> - <span class="number">100</span></span><br><span class="line">    theta_1 = random.random() * <span class="number">200</span> - <span class="number">100</span></span><br><span class="line">    </span><br><span class="line">print(<span class="string">f"Sequence <span class="subst">&#123;count&#125;</span>: with loss <span class="subst">&#123;min_loss&#125;</span> when theta_1 = <span class="subst">&#123;best_theta_1&#125;</span>, theta_0 = <span class="subst">&#123;best_theta_0&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>以下输出纯粹随机，多数情况下为了达到0.001的误差，运行次数可能非常大。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sequence <span class="number">819148</span>: <span class="keyword">with</span> loss <span class="number">43.60210733030882</span> when theta_1 = <span class="number">9.150345535429594</span>, theta_0 = <span class="number">-34.95354185708321</span></span><br></pre></td></tr></table></figure><blockquote><p>另一次随机结果。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sequence <span class="number">8002336</span>: <span class="keyword">with</span> loss <span class="number">43.60100211158343</span> when theta_1 = <span class="number">9.132154060693026</span>, theta_0 = <span class="number">-34.86180554948703</span></span><br></pre></td></tr></table></figure><blockquote><p>误差增大两个数量级后。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sequence <span class="number">57349</span>: <span class="keyword">with</span> loss <span class="number">43.88216812932692</span> when theta_1 = <span class="number">8.556675789981298</span>, theta_0 = <span class="number">-30.875293568458332</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">best_y_hat = X_rm * best_theta_1 + best_theta_0</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">plt.scatter(X_rm, Y)</span><br><span class="line">plt.plot(X_rm, best_y_hat, color=<span class="string">'red'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><a id="more"></a><center><p><img src="./pics/png1.png" alt="png1"></p></center><h3 id="2-监督式方向调整选择-theta-0-和-theta-1"><a href="#2-监督式方向调整选择-theta-0-和-theta-1" class="headerlink" title="2.监督式方向调整选择$\theta_0$和$\theta_1$"></a>2.监督式方向调整选择$\theta_0$和$\theta_1$</h3><blockquote><p>需提前增大两个数量级的误差，否则时间太久了，即<code>min_loss - current_loss &lt; 0.1</code>。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">theta_0 = <span class="number">100</span></span><br><span class="line">theta_1 = <span class="number">100</span></span><br><span class="line">direction = [</span><br><span class="line">    (<span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">    (<span class="number">1</span>, <span class="number">-1</span>),</span><br><span class="line">    (<span class="number">-1</span>, <span class="number">1</span>),</span><br><span class="line">    (<span class="number">-1</span>, <span class="number">-1</span>)</span><br><span class="line">]</span><br><span class="line">scalar = <span class="number">.1</span></span><br><span class="line">min_loss = float(<span class="string">'inf'</span>)</span><br><span class="line">new_direction = random.choice(direction)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    new_0, new_1 = new_direction</span><br><span class="line">    theta_0, theta_1 = theta_0 + scalar * new_0, theta_1 + scalar * new_1</span><br><span class="line">    </span><br><span class="line">    y_hat = X_rm * theta_1 + theta_0</span><br><span class="line">    current_loss = np.sum(np.square(Y - y_hat)) / len(Y)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> min_loss &gt; current_loss:</span><br><span class="line">        flag = <span class="number">0</span> <span class="keyword">if</span> min_loss - current_loss &lt; <span class="number">.1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        min_loss = current_loss</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        new_direction = random.choice(direction)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">f"Sequence <span class="subst">&#123;count&#125;</span>: with loss <span class="subst">&#123;min_loss&#125;</span> when theta_1 = <span class="subst">&#123;best_theta_1&#125;</span>, theta_0 = <span class="subst">&#123;best_theta_0&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sequence <span class="number">969</span>: <span class="keyword">with</span> loss <span class="number">61.352506983530255</span> when theta_1 = <span class="number">9.209101739990572</span>, theta_0 = <span class="number">-35.23063139725508</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">best_y_hat = X_rm * best_theta_1 + best_theta_0</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">plt.scatter(X_rm, Y)</span><br><span class="line">plt.plot(X_rm, best_y_hat, color=<span class="string">'red'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><center><p><img src="./pics/png2.png" alt="png2"></p></center><h3 id="3-梯度下降选择-theta-0-和-theta-1"><a href="#3-梯度下降选择-theta-0-和-theta-1" class="headerlink" title="3.梯度下降选择$\theta_0$和$\theta_1$"></a>3.梯度下降选择$\theta_0$和$\theta_1$</h3><h4 id="3-1-方差代价函数"><a href="#3-1-方差代价函数" class="headerlink" title="3.1.方差代价函数"></a>3.1.方差代价函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %%time</span></span><br><span class="line">learning_rate = <span class="number">1</span> / <span class="number">1000</span></span><br><span class="line">theta_0 = <span class="number">100</span></span><br><span class="line">theta_1 = <span class="number">100</span></span><br><span class="line">min_loss = float(<span class="string">'inf'</span>)</span><br><span class="line">update_count = <span class="number">0</span></span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    update_count += <span class="number">1</span></span><br><span class="line">    y_hat = X_rm * theta_1 + theta_0</span><br><span class="line">    current_loss = np.sum(np.square(Y - y_hat)) / len(Y)</span><br><span class="line">    <span class="keyword">if</span> min_loss &gt; current_loss:</span><br><span class="line">        flag = <span class="number">0</span> <span class="keyword">if</span> min_loss - current_loss &lt; <span class="number">.000001</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        min_loss = current_loss    </span><br><span class="line">        </span><br><span class="line">    theta_1 = theta_1 - learning_rate * <span class="number">2</span> * np.sum((y_hat - Y) * X_rm) / len(Y)</span><br><span class="line">    theta_0 = theta_0 - learning_rate * <span class="number">2</span> * np.sum(y_hat - Y) / len(Y)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f"<span class="subst">&#123;update_count&#125;</span> iterations with min_loss <span class="subst">&#123;min_loss&#125;</span> to get best theta with theta_0: <span class="subst">&#123;theta_0&#125;</span> and theta_1: <span class="subst">&#123;theta_1&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">187323</span> iterations <span class="keyword">with</span> min_loss <span class="number">43.62134288563148</span> to get best theta <span class="keyword">with</span> theta_0: <span class="number">-33.3716190502384</span> <span class="keyword">and</span> theta_1: <span class="number">8.897899324289263</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">best_y_hat = X_rm * theta_1 + theta_0</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">plt.scatter(X_rm, Y)</span><br><span class="line">plt.plot(X_rm, best_y_hat, color=<span class="string">'red'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><center><p><img src="./pics/png3.png" alt="png3"></p></center><h4 id="3-2-绝对值代价函数"><a href="#3-2-绝对值代价函数" class="headerlink" title="3.2.绝对值代价函数"></a>3.2.绝对值代价函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">learning_rate = <span class="number">1</span> / <span class="number">10000</span></span><br><span class="line">theta_0 = <span class="number">100</span></span><br><span class="line">theta_1 = <span class="number">100</span></span><br><span class="line">min_loss = float(<span class="string">'inf'</span>)</span><br><span class="line">update_count = <span class="number">0</span></span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    <span class="keyword">if</span> update_count % <span class="number">10000</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;update_count&#125;</span> iteration: with loss <span class="subst">&#123;min_loss&#125;</span> : theta_1 = <span class="subst">&#123;theta_1&#125;</span>, theta_0 = <span class="subst">&#123;theta_0&#125;</span>"</span>) </span><br><span class="line">    update_count += <span class="number">1</span></span><br><span class="line">    y_hat = X_rm * theta_1 + theta_0</span><br><span class="line">    current_loss = np.sum(np.abs(Y - y_hat)) / len(Y)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> min_loss &gt; current_loss:</span><br><span class="line">        flag = <span class="number">0</span> <span class="keyword">if</span> min_loss - current_loss &lt; <span class="number">.0001</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        min_loss = current_loss    </span><br><span class="line">        </span><br><span class="line">    theta_1 = theta_1 - learning_rate * np.sum(X_rm) / len(Y)</span><br><span class="line">    theta_0 = theta_0 - learning_rate * np.sum(X_rm) / len(Y)</span><br><span class="line">print(<span class="string">f"<span class="subst">&#123;update_count&#125;</span> iterations to get best theta with theta_1 = <span class="subst">&#123;theta_1&#125;</span> theta_0 = <span class="subst">&#123;theta_0&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">154300</span> iterations to get best theta <span class="keyword">with</span> theta_1 = <span class="number">3.0280914034127573</span> theta_0 = <span class="number">3.0280914034127573</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">best_y_hat = X_rm * theta_1 + theta_0</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">plt.scatter(X_rm, Y)</span><br><span class="line">plt.plot(X_rm, best_y_hat, color=<span class="string">'red'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><center><p><img src="./pics/png5.png" alt="png4"></p></center><blockquote><p>随机初始值的拟合效果。</p></blockquote><center><p><img src="./pics/png4.png" alt="png4"></p></center><h2 id="4-结论"><a href="#4-结论" class="headerlink" title="4.结论"></a>4.结论</h2><p>为了方便比较而设定的初始值，会直接影响模型最终的拟合效果，因此即使是梯度下降法中误差再小，也无法弥补初始值对最终曲线的影响。比较模型性能需要从多个方面进行考量，单从迭代次数而言过于片面，还需要考虑最终的拟合情况。可以肯定的是，对比前两种随机过程，梯度下降的效率要高几个数量级。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>北京地铁智能搜索系统的Python实现</title>
      <link href="/2019/07/14/%E5%8C%97%E4%BA%AC%E5%9C%B0%E9%93%81%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/07/14/%E5%8C%97%E4%BA%AC%E5%9C%B0%E9%93%81%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-获取地铁站点线路信息整理得到目标格式数据"><a href="#1-获取地铁站点线路信息整理得到目标格式数据" class="headerlink" title="1.获取地铁站点线路信息整理得到目标格式数据"></a>1.获取地铁站点线路信息整理得到目标格式数据</h2><blockquote><p>根据经纬度计算直线地理距离，此处<code>station_nodes_dict</code>为{station: [lat, lng], …}格式存储所有站点信息的字典。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geo_distance</span><span class="params">(origin:str, destination:str)</span>:</span></span><br><span class="line">    origin = station_nodes_dict[origin]</span><br><span class="line">    destination = station_nodes_dict[destination]</span><br><span class="line">    lat1, lon1 = origin</span><br><span class="line">    lat2, lon2 = destination</span><br><span class="line">    radius = <span class="number">6371</span>  <span class="comment"># km</span></span><br><span class="line"></span><br><span class="line">    dlat = math.radians(lat2 - lat1)</span><br><span class="line">    dlon = math.radians(lon2 - lon1)</span><br><span class="line">    a = (math.sin(dlat / <span class="number">2</span>) * math.sin(dlat / <span class="number">2</span>) +</span><br><span class="line">         math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) *</span><br><span class="line">         math.sin(dlon / <span class="number">2</span>) * math.sin(dlon / <span class="number">2</span>))</span><br><span class="line">    c = <span class="number">2</span> * math.atan2(math.sqrt(a), math.sqrt(<span class="number">1</span> - a))</span><br><span class="line">    distance = radius * c</span><br><span class="line">    <span class="keyword">return</span> distance</span><br></pre></td></tr></table></figure><a id="more"></a>   <blockquote><ul><li>从网页爬取地铁站信息，整理后最终得到{metro_line: {station:(lat, lng), …}, …}双层字典结构的地铁站信息。</li><li>关于使用地图API的选择，可选百度，高德和谷歌，百度的精准度差，谷歌需要科学上网实现，精确度未进行确认，应该不错，折中选择高德地图，若干站点的经纬度需要获取后手动调整。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> .api <span class="keyword">import</span> gaode_api</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://dt.8684.cn/bj'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_metro_map</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return &#123;metro_line_1: &#123;station, ....&#125;, ...&#125;</span></span><br><span class="line"><span class="string">    :param url: metro web page url</span></span><br><span class="line"><span class="string">    :return: &#123;str: &#123;str,...&#125;, ....&#125;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    metro_map = &#123;&#125;</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    response.encoding = <span class="string">'utf-8'</span></span><br><span class="line">    soup_content = BeautifulSoup(response.text, features=<span class="string">"lxml"</span>)</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> soup_content.find_all(class_=<span class="string">'sLink'</span>):</span><br><span class="line">        temp = link.text.split()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'未开通'</span> <span class="keyword">in</span> temp[<span class="number">0</span>] <span class="keyword">or</span> <span class="string">'S2'</span> <span class="keyword">in</span> temp[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'外环'</span> <span class="keyword">in</span> temp[<span class="number">0</span>]:</span><br><span class="line">            temp[<span class="number">0</span>] = temp[<span class="number">0</span>].split(<span class="string">'线'</span>)[<span class="number">0</span>] + <span class="string">'线'</span></span><br><span class="line">        metro_map[temp[<span class="number">0</span>]] = temp[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> metro_map</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_geoinfo_gaode</span><span class="params">(address)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return the latitude and longitude of address.</span></span><br><span class="line"><span class="string">    :param address: str</span></span><br><span class="line"><span class="string">    :return: float(latitude), float(longitude)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    output_type = json</span><br><span class="line">    uri = <span class="string">f"https://restapi.amap.com/v3/geocode/geo?address=<span class="subst">&#123;address&#125;</span>&amp;output=<span class="subst">&#123;output_type&#125;</span>&amp;key=<span class="subst">&#123;gaode_api&#125;</span>"</span></span><br><span class="line">    r = requests.get(uri).text</span><br><span class="line">    result = json.loads(r)[<span class="string">'geocodes'</span>][<span class="number">0</span>][<span class="string">'location'</span>]</span><br><span class="line">    lng, lat = result.split(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">return</span> float(lat), float(lng)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_single_line_geoinfo</span><span class="params">(metro_line, stations)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return dictionary with format of &#123;metro_line_1: (lat, lng),...)&#125;</span></span><br><span class="line"><span class="string">    :param metro_line: str</span></span><br><span class="line"><span class="string">    :param stations: dict </span></span><br><span class="line"><span class="string">    :return: dict</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    metro_geoinfo = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> station <span class="keyword">in</span> stations:</span><br><span class="line">        metro_geoinfo[station] = get_geoinfo_gaode(metro_line + station + <span class="string">'地铁站'</span>)</span><br><span class="line">    <span class="keyword">return</span> metro_geoinfo    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_line_geoinfo</span><span class="params">(metro_map)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return all metro lines geoinfo with format &#123;metro_line: &#123;station,...&#125;, ...&#125;</span></span><br><span class="line"><span class="string">    :param metro_map: dict</span></span><br><span class="line"><span class="string">    :return: dict</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    metro_line_geoinfo = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> metro_line, stations <span class="keyword">in</span> metro_map.items():</span><br><span class="line">        line_info = get_single_line_geoinfo(metro_line, metro_map[metro_line])</span><br><span class="line">        metro_line_geoinfo[metro_line] = line_info</span><br><span class="line">        print(metro_line)</span><br><span class="line">    <span class="keyword">return</span> metro_line_geoinfo</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip_station</span><span class="params">(metro_line)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return a list of previous station and next station combined. [(a, b), (b, c), ...]</span></span><br><span class="line"><span class="string">    :param metro_line: str</span></span><br><span class="line"><span class="string">    :return: list</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    station1 = list(metro_line.keys())</span><br><span class="line">    station2 = list(metro_line.keys())</span><br><span class="line">    station2.pop(<span class="number">0</span>)</span><br><span class="line">    result = list(zip(station1, station2))</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><blockquote><p>将获取的目标格式数据写入文件，方便手动修改不准确的站点位置以及重复使用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    map = get_metro_map(url)</span><br><span class="line">    result = get_all_line_geoinfo(map)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'Beijing_metro_geoinfo.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(result, f, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><blockquote><p><code>googlemaps</code>用法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> googlemaps </span><br><span class="line">g_maps = googlemaps.Client(key=<span class="string">'yourkey'</span>)</span><br><span class="line">g_maps.geocode(<span class="string">'西红门，地铁站，北京，中国'</span>)[<span class="number">0</span>][<span class="string">'geometry'</span>][<span class="string">'location'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'lat'</span>: <span class="number">39.7898</span>, <span class="string">'lng'</span>: <span class="number">116.328689</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="2-数据整理与可视化"><a href="#2-数据整理与可视化" class="headerlink" title="2.数据整理与可视化"></a>2.数据整理与可视化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'Beijing_metro_geoinfo_calibrated.json'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    metro_map = json.load(f)</span><br></pre></td></tr></table></figure><blockquote><ul><li>画出整体图形，根据图形效果进行局部偏移较大站点经纬度的调整，将这些站点的api返回经纬度同实际经纬度进行比较校准。</li><li>用到的几个<code>networkx</code>的几个<code>api</code>：<code>addedge(), add_nodes_from(), add_edges_from(), add_cycle()</code>以及后面用到的<code>add_weighted_edges_from()</code>。</li><li><code>METRO = nx.Graph()</code>的几个实例方法：<code>METRO.neighbor()</code>查看某节点的相邻节点；<code>METRO.degree()</code>查看图中所有节点的度。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> plt</span><br><span class="line">METRO = nx.Graph()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放所有站点经纬度的信息</span></span><br><span class="line">station_nodes_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> metro, stations <span class="keyword">in</span> metro_map.items():</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> stations.items():</span><br><span class="line">        station_nodes_dict[k] = v</span><br><span class="line">    <span class="keyword">if</span> metro == <span class="string">'北京地铁2号线'</span>:</span><br><span class="line">        METRO.add_cycle(stations.keys())</span><br><span class="line">    <span class="keyword">elif</span> metro == <span class="string">'北京地铁10号线'</span>:</span><br><span class="line">        METRO.add_cycle(stations.keys())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        METRO.add_edges_from(zip_station(metro_map[metro]))</span><br><span class="line">    METRO.add_nodes_from(stations.keys()) </span><br><span class="line">    </span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">20</span>))</span><br><span class="line"><span class="comment"># 调整画布大小查看奇异站点</span></span><br><span class="line">METRO.add_edge(<span class="string">'阎村东'</span>, <span class="string">'苏庄'</span>)</span><br><span class="line">nx.draw(METRO, station_nodes_dict, with_labels = <span class="literal">False</span>, node_size=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="3-搜索策略：最少换乘，最少站数，最少距离"><a href="#3-搜索策略：最少换乘，最少站数，最少距离" class="headerlink" title="3.搜索策略：最少换乘，最少站数，最少距离"></a>3.搜索策略：最少换乘，最少站数，最少距离</h2><blockquote><ul><li>三种策略实现。</li><li><code>transfer_list</code>列表存储所有换乘站点。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">transfer_list_temp = [x <span class="keyword">for</span> x <span class="keyword">in</span> METRO.degree() <span class="keyword">if</span> x[<span class="number">1</span>] &gt; <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> transfer_list_temp:</span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">0</span>] <span class="keyword">in</span> (<span class="string">'苹果园'</span>, <span class="string">'大红门'</span>):</span><br><span class="line">        transfer_list_temp.remove(x)</span><br><span class="line">transfer_list = [x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> transfer_list_temp]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">least_transfer_first</span><span class="params">(paths:list)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_transfer_number</span><span class="params">(path:list)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(set(path) &amp; set(transfer_list))</span><br><span class="line">    <span class="keyword">return</span> sorted(paths, key=get_transfer_number)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">least_station_first</span><span class="params">(paths)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> sorted(paths, key=len)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">least_distance_first</span><span class="params">(paths)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> len(paths) &lt;= <span class="number">1</span>: <span class="keyword">return</span> paths</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_path_distance</span><span class="params">(path)</span>:</span></span><br><span class="line">        distance = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(path)):</span><br><span class="line">            distance += geo_distance(path[i<span class="number">-1</span>], path[i])</span><br><span class="line">        <span class="keyword">return</span> distance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sorted(paths, key=get_path_distance)</span><br></pre></td></tr></table></figure><blockquote><p>广度搜索实现，默认最短路径策略搜索。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(start, destination, METRO_GRAPH, sort_candidate=least_distance_first)</span>:</span></span><br><span class="line">    target_list = []</span><br><span class="line">    </span><br><span class="line">    paths = [[start]]</span><br><span class="line">    visited = set()</span><br><span class="line">    <span class="keyword">while</span> paths: </span><br><span class="line">        path = paths.pop(<span class="number">0</span>)</span><br><span class="line">        frontier = path[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> frontier <span class="keyword">in</span> visited: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> city <span class="keyword">in</span> METRO_GRAPH.neighbors(frontier):</span><br><span class="line">            <span class="keyword">if</span> city <span class="keyword">in</span> path: <span class="keyword">continue</span>  </span><br><span class="line">            new_path = path + [city]</span><br><span class="line">            paths.append(new_path)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> city == destination: </span><br><span class="line">                target_list.append(new_path)</span><br><span class="line">                paths.pop()</span><br><span class="line"></span><br><span class="line">        visited.add(frontier)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> target_list:</span><br><span class="line">        target_list = sort_candidate(target_list)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">' -&gt; '</span>.join(target_list)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"No way from <span class="subst">&#123;start&#125;</span> to <span class="subst">&#123;destination&#125;</span>."</span></span><br></pre></td></tr></table></figure><blockquote><p>测试。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>search(<span class="string">'大红门'</span>, <span class="string">'广渠门外'</span>, METRO, least_station_first)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'大红门 -&gt; 石榴庄 -&gt; 宋家庄 -&gt; 刘家窑 -&gt; 蒲黄榆 -&gt; 天坛东门 -&gt; 磁器口 -&gt; 广渠门内 -&gt; 广渠门外'</span></span><br></pre></td></tr></table></figure><h2 id="4-增加经过站点的搜索实现"><a href="#4-增加经过站点的搜索实现" class="headerlink" title="4.增加经过站点的搜索实现"></a>4.增加经过站点的搜索实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_go_by</span><span class="params">(start, go_by:list, destination, METRO_GRAPH, sort_candidate=least_station_first)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(go_by, list):</span><br><span class="line">        destination_list = go_by + [destination]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        destination_list = [go_by] + [destination]</span><br><span class="line">        </span><br><span class="line">    result_solution = []</span><br><span class="line">    <span class="keyword">while</span> destination_list:</span><br><span class="line">        temp_destination = destination_list.pop(<span class="number">0</span>)</span><br><span class="line">        temp_result = search(start, temp_destination, METRO_GRAPH, sort_candidate)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> temp_result.startswith(<span class="string">'N'</span>):</span><br><span class="line">            result_solution.append(temp_result)</span><br><span class="line">            start = temp_destination</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> result_solution:</span><br><span class="line">        result = []</span><br><span class="line">        temp1 = [x.split(<span class="string">' -&gt; '</span>) <span class="keyword">for</span> x <span class="keyword">in</span> result_solution]</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> temp1:</span><br><span class="line">            <span class="keyword">for</span> station <span class="keyword">in</span> x:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> station <span class="keyword">in</span> result:</span><br><span class="line">                    result.append(station)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">' -&gt; '</span>.join(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"No way from <span class="subst">&#123;start&#125;</span> to <span class="subst">&#123;destination&#125;</span> go by <span class="subst">&#123;go_by&#125;</span>."</span></span><br></pre></td></tr></table></figure><blockquote><p>测试。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>search_go_by(<span class="string">'苹果园'</span>, <span class="string">'万寿路'</span>, <span class="string">'六里桥'</span>, METRO)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'苹果园 -&gt; 古城 -&gt; 八角游乐园 -&gt; 八宝山 -&gt; 玉泉路 -&gt; 五棵松 -&gt; 万寿路 -&gt; 公主坟 -&gt; 莲花桥 -&gt; 六里桥'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>search_go_by(<span class="string">'苹果园'</span>, [<span class="string">'八宝山'</span>, <span class="string">'杨庄'</span>], <span class="string">'六里桥'</span>, METRO)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'苹果园 -&gt; 古城 -&gt; 八角游乐园 -&gt; 八宝山 -&gt; 杨庄 -&gt; 西黄村 -&gt; 廖公庄 -&gt; 田村 -&gt; 海淀五路居 -&gt; 慈寿寺 -&gt; 西钓鱼台 -&gt; 公主坟 -&gt; 莲花桥 -&gt; 六里桥'</span></span><br></pre></td></tr></table></figure><h2 id="5-加入站间距离权重的图，使用networkx内置api进行最短路径搜寻"><a href="#5-加入站间距离权重的图，使用networkx内置api进行最短路径搜寻" class="headerlink" title="5.加入站间距离权重的图，使用networkx内置api进行最短路径搜寻"></a>5.加入站间距离权重的图，使用<code>networkx</code>内置<code>api</code>进行最短路径搜寻</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip_station_with_distance</span><span class="params">(metro_line)</span>:</span></span><br><span class="line">    connected_station = []</span><br><span class="line">    station1 = list(metro_line.keys())</span><br><span class="line">    station2 = list(metro_line.keys())</span><br><span class="line">    station2.pop(<span class="number">0</span>)</span><br><span class="line">    result = list(zip(station1, station2))</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> result:</span><br><span class="line">        distance = geo_distance(each[<span class="number">0</span>], each[<span class="number">1</span>])</span><br><span class="line">        connected_station.append(distance)</span><br><span class="line">    result = list(zip(result, connected_station))</span><br><span class="line">    <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(result):</span><br><span class="line">        result[i] = x[<span class="number">0</span>] + (x[<span class="number">1</span>],)</span><br><span class="line">    <span class="keyword">return</span> list(result)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">METRO_WITH_DISTANCE = nx.Graph()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放所有站点经纬度的信息</span></span><br><span class="line">station_nodes_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> metro, stations <span class="keyword">in</span> metro_map.items():</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> stations.items():</span><br><span class="line">        station_nodes_dict[k] = v</span><br><span class="line">    <span class="keyword">if</span> metro == <span class="string">'北京地铁2号线'</span>:</span><br><span class="line">        METRO_WITH_DISTANCE.add_cycle(stations.keys())</span><br><span class="line">    <span class="keyword">elif</span> metro == <span class="string">'北京地铁10号线'</span>:</span><br><span class="line">        METRO_WITH_DISTANCE.add_cycle(stations.keys())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        METRO_WITH_DISTANCE.add_weighted_edges_from(zip_station_with_distance(metro_map[metro]))</span><br><span class="line">    METRO_WITH_DISTANCE.add_nodes_from(stations.keys()) </span><br><span class="line">    </span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">20</span>))</span><br><span class="line">METRO_WITH_DISTANCE.add_edge(<span class="string">'阎村东'</span>, <span class="string">'苏庄'</span>)</span><br><span class="line">nx.draw(METRO_WITH_DISTANCE, station_nodes_dict, with_labels = <span class="literal">False</span>, node_size=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="./pics/lableless.png" alt="lableless"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">20</span>))</span><br><span class="line">nx.draw(METRO_WITH_DISTANCE, station_nodes_dict, with_labels = <span class="literal">True</span>, node_size=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="./pics/labled.png" alt="lableless"></p><blockquote><p>搜索效果对比，10000次搜索，手动实现的<code>search()</code>函数与内置的<code>dijkstra_path()</code>算法相同结果比率为0.4617，手动实现的还有改善提升空间</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> test <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">    same_result = <span class="string">'different result'</span></span><br><span class="line">    start = random.choice(list(METRO_WITH_DISTANCE.nodes()))</span><br><span class="line">    destination = random.choice(list(METRO_WITH_DISTANCE.nodes()))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> start != destination:</span><br><span class="line">        api_method = <span class="string">' -&gt; '</span>.join(nx.dijkstra_path(METRO_WITH_DISTANCE, start, destination))</span><br><span class="line">        station_number_1 = len(nx.dijkstra_path(METRO_WITH_DISTANCE, start, destination))</span><br><span class="line">        </span><br><span class="line">        search_method = search(start, destination, METRO)</span><br><span class="line">        station_number_2 = len(search_method.split(<span class="string">' -&gt; '</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> api_method == search_method:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            same_result = <span class="string">'same result'</span></span><br><span class="line">        stations_count = <span class="string">'same_station_number'</span> <span class="keyword">if</span> station_number_1 == station_number_2 <span class="keyword">else</span> <span class="string">'different_station_number'</span></span><br><span class="line">        print(<span class="string">f"dijkstra_method: <span class="subst">&#123;api_method&#125;</span> with <span class="subst">&#123;stations_count&#125;</span> stations."</span>)</span><br><span class="line">        print(<span class="string">f"search_method:   <span class="subst">&#123;search_method&#125;</span> with <span class="subst">&#123;stations_count&#125;</span> stations."</span>)</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;same_result&#125;</span>"</span>)</span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">50</span>)</span><br><span class="line">same_rate = count / <span class="number">10000</span></span><br><span class="line">print(<span class="string">f"same rate <span class="subst">&#123;same_rate&#125;</span>."</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> NLP </category>
          
          <category> 智能系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python可变数据结构的陷阱</title>
      <link href="/2019/07/09/Python%E5%8F%AF%E5%8F%98%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E9%99%B7%E9%98%B1/"/>
      <url>/2019/07/09/Python%E5%8F%AF%E5%8F%98%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E9%99%B7%E9%98%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-标识，别名和副本"><a href="#1-标识，别名和副本" class="headerlink" title="1.标识，别名和副本"></a>1.标识，别名和副本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>],(<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_2 = list_1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_2</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1 <span class="keyword">is</span> list_2</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_3 = list_1[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_3</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1 <span class="keyword">is</span> list_3</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>list_1</code>和<code>list_2</code>均是对象标识，且两者互为对方别名。两者在内存中的引用为同一列表对象。</li><li><code>list_3</code>为<code>list_1</code>副本（同时也是<code>list_2</code>副本），副本引用一份同样容器结构的不同对象。副本创建默认是浅复制，即同<code>copy</code>模块中的<code>copy</code>方法。</li></ul></blockquote><a id="more"></a><h3 id="2-深浅复制"><a href="#2-深浅复制" class="headerlink" title="2.深浅复制"></a>2.深浅复制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_4 = copy.copy(list_1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_4</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_4 <span class="keyword">is</span> list_1</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>浅复制本质和通过<code>list()</code>方法或者<code>list_1[:]</code>创建的副本对象一致。</li><li>对不可变序列如<code>str,bytes,tuple</code>使用<code>[:]</code>方式创建的副本，其返回同一个对象的引用。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_5 = copy.deepcopy(list_1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_4</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_5</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1.append(<span class="string">'a'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,), <span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_4</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_5</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br></pre></td></tr></table></figure><blockquote><p>改变原容器结构的操作方法<code>append()</code>只作用于<code>list_1</code>。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1[<span class="number">-3</span>].append(<span class="string">'a'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="string">'a'</span>], (<span class="number">7</span>,), <span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_4</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="string">'a'</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_5</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1[<span class="number">-2</span>] += (<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="string">'a'</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>), <span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_4</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="string">'a'</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_5</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_6 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_6</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>,)]</span><br></pre></td></tr></table></figure><blockquote><ul><li>不改变原容器结构的方法对<code>list_4</code>有效，因为副本中的可变对象与原对象引用同一列表<code>[5,6]</code>，对深复制对象无效。实际上，除非直接操作<code>list_5</code>变量，否则任何对于其他列表的操作均不会对<code>list_5</code>有影响。</li><li>对列表中<code>tuple</code>的操作，会创建一个新的<code>tuple</code>。</li><li><code>list_6</code>：将同样的值赋给一个新变量，与之前的<code>list</code>没有引用关系。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法的Python实现</title>
      <link href="/2019/07/08/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84Python%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/07/08/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84Python%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>1.是否稳定：两个数<code>a,b</code>相等，排序之前<code>a</code>在<code>b</code>前面，排序后位置不变为稳定，反之则不稳定。</p><p>2.时间复杂度：对待排序数据的总操作次数，反映为当排序数据量变化时，操作次数呈现的规律。</p><p>3.空间复杂度：算法在计算机执行时所需要存储空间的度量，是排序数据规模的函数。</p><p>4.根据是否通过<strong>比较</strong>排序来分为：</p><pre><code>比较类排序：通过比较来决定元素之间的次序，由于其时间复杂度无法突破O(nlogn)，因此也称为非线性时间比较类排序。非比较类排序：不通过比较来决定元素间的相对次序，可以突破上述比较排序的时间下限，以线性时间运行，因此也称为线性时间非比较类排序。</code></pre><h3 id="1-选择排序"><a href="#1-选择排序" class="headerlink" title="1.选择排序"></a>1.选择排序</h3><blockquote><p>在未排序的序列中找到最小（大）元素，存放到起始位置，再从剩余未排序的元素中找最小（大）元素，放到已排序序列的末尾，以此类推。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(nums_list)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums_list) - <span class="number">1</span>):</span><br><span class="line">            low_index = i</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(nums_list)):</span><br><span class="line">                <span class="keyword">if</span> nums_list[j] &lt; nums_list[low_index]:</span><br><span class="line">                    low_index = j</span><br><span class="line">            <span class="keyword">if</span> low_index != i:</span><br><span class="line">                nums_list[low_index], nums_list[i] = nums_list[i], nums_list[low_index]</span><br><span class="line">        <span class="keyword">return</span> nums_list</span><br></pre></td></tr></table></figure><a id="more"></a><center><p><img src="./gifs/selection.gif" alt="gif"></p></center><h3 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2.冒泡排序"></a>2.冒泡排序</h3><blockquote><p>比较相邻元素，如果第一个比第二个大，交换位置，重复以上到序列结束；第二次重复以上动作，除了第一个元素（已排序）。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(num_list)</span>:</span></span><br><span class="line">        epochs = len(num_list) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">            exchanged = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(num_list) - <span class="number">1</span> - epoch):</span><br><span class="line">                <span class="keyword">if</span> num_list[i] &gt; num_list[i+<span class="number">1</span>]:</span><br><span class="line">                    num_list[i], num_list[i+<span class="number">1</span>] = num_list[i+<span class="number">1</span>], num_list[i]</span><br><span class="line">                    exchanged = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> exchanged:</span><br><span class="line">                <span class="keyword">return</span> num_list</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/bubble.gif" alt="gif"></p></center><h3 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3.插入排序"></a>3.插入排序</h3><blockquote><ul><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤2~5。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span><span class="params">(nums_list)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums_list)):</span><br><span class="line">            insert_value = nums_list[i]</span><br><span class="line">            j = i - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j &gt;= <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> nums_list[j] &gt; insert_value:</span><br><span class="line">                    nums_list[j + <span class="number">1</span>] = nums_list[j]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    nums_list[j + <span class="number">1</span>] = insert_value</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            nums_list[j + <span class="number">1</span>] = insert_value</span><br><span class="line">        <span class="keyword">return</span> nums_list</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/insertion.gif" alt="gif"></p></center><h3 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4.希尔排序"></a>4.希尔排序</h3><blockquote><ul><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li><li>按增量序列个数k，对序列进行k趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shell_insertion_sort</span><span class="params">(num_list, start_index, increment)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> inserting_index <span class="keyword">in</span> range(start_index+increment, len(num_list), increment):</span><br><span class="line">            inserting_value = num_list[inserting_index]</span><br><span class="line">            i = inserting_index - increment</span><br><span class="line">            <span class="keyword">while</span> i &gt;= start_index:</span><br><span class="line">                <span class="keyword">if</span> num_list[i] &gt; inserting_value:</span><br><span class="line">                    num_list[i+increment] = num_list[i]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    num_list[i+increment] = inserting_value</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                i -= increment</span><br><span class="line">            num_list[i+increment] = inserting_value</span><br><span class="line">        <span class="keyword">return</span> num_list</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/shell.gif" alt="gif"></p></center><h3 id="5-归并排序"><a href="#5-归并排序" class="headerlink" title="5.归并排序"></a>5.归并排序</h3><blockquote><ul><li>把长度为n的输入序列分成两个长度为n/2的子序列；</li><li>对这两个子序列分别采用归并排序；</li><li>将两个排序好的子序列合并成一个最终的排序序列。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(num_list)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(num_list) &lt; <span class="number">2</span>: <span class="keyword">return</span> num_list</span><br><span class="line">        mid_index = len(num_list) // <span class="number">2</span></span><br><span class="line">        left_list = num_list[:mid_index]</span><br><span class="line">        right_list = num_list[mid_index:]</span><br><span class="line">        left_list = MergeSort.merge_sort(left_list)</span><br><span class="line">        right_list = MergeSort.merge_sort(right_list)</span><br><span class="line"></span><br><span class="line">        left_index = <span class="number">0</span></span><br><span class="line">        right_index = <span class="number">0</span></span><br><span class="line">        all_index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left_index &lt; len(left_list) <span class="keyword">and</span> right_index &lt; len(right_list):</span><br><span class="line">            <span class="comment"># 两个字列表都未遍历完</span></span><br><span class="line">            <span class="keyword">if</span> left_list[left_index] &lt; right_list[right_index]:</span><br><span class="line">                num_list[all_index] = left_list[left_index]</span><br><span class="line">                left_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_list[all_index] = right_list[right_index]</span><br><span class="line">                right_index += <span class="number">1</span></span><br><span class="line">            all_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left_index &lt; len(left_list):</span><br><span class="line">            <span class="comment"># 左列表未遍历完</span></span><br><span class="line">            num_list[all_index] = left_list[left_index]</span><br><span class="line">            left_index += <span class="number">1</span></span><br><span class="line">            all_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> right_index &lt; len(right_list):</span><br><span class="line">            <span class="comment"># 右列表未遍历完</span></span><br><span class="line">            num_list[all_index] = right_list[right_index]</span><br><span class="line">            right_index += <span class="number">1</span></span><br><span class="line">            all_index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> num_list</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/merge.gif" alt="gif"></p></center><h3 id="6-快速排序"><a href="#6-快速排序" class="headerlink" title="6.快速排序"></a>6.快速排序</h3><blockquote><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）；</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(num_list)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(num_list) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> num_list</span><br><span class="line">        base_value = num_list[<span class="number">0</span>]</span><br><span class="line">        left_index = <span class="number">1</span></span><br><span class="line">        right_index = len(num_list) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">while</span> left_index &lt;= right_index:</span><br><span class="line">                <span class="keyword">if</span> num_list[left_index] &lt;= base_value:</span><br><span class="line">                    left_index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> num_list[right_index] &gt;= base_value:</span><br><span class="line">                    right_index -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> left_index &lt;= right_index:</span><br><span class="line">                num_list[left_index], num_list[right_index] = num_list[right_index], num_list[left_index]</span><br><span class="line">                left_index += <span class="number">1</span></span><br><span class="line">                right_index -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        num_list[<span class="number">0</span>] = num_list[right_index]</span><br><span class="line">        num_list[right_index] = base_value</span><br><span class="line"></span><br><span class="line">        left_list = num_list[:right_index]</span><br><span class="line">        right_list = num_list[right_index+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> QuickSort.quick_sort(left_list) + [num_list[right_index]] + QuickSort.quick_sort(right_list)</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/quicksort.gif" alt="gif"></p></center><h3 id="7-桶排序"><a href="#7-桶排序" class="headerlink" title="7.桶排序"></a>7.桶排序</h3><blockquote><ul><li>设置一个定量的数组当作空桶；</li><li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li><li>对每个不是空的桶进行排序；</li><li>从不是空的桶里把排好序的数据拼接起来。 </li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BucketSort</span>:</span></span><br><span class="line">    DEFAULT_BUCKET_SIZE=<span class="number">5</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(my_list, bucket_size=DEFAULT_BUCKET_SIZE)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(my_list) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">"Please add some elements in the array."</span>)</span><br><span class="line">    </span><br><span class="line">        min_value, max_value = (min(my_list), max(my_list))</span><br><span class="line">        bucket_count = ((max_value - min_value) // bucket_size + <span class="number">1</span>)</span><br><span class="line">        buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(int(bucket_count))]</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(my_list)):</span><br><span class="line">            buckets[int((my_list[i] - min_value) // bucket_size)].append(my_list[i])</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> sorted([buckets[i][j] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(buckets))</span><br><span class="line">                                     <span class="keyword">for</span> j <span class="keyword">in</span> range(len(buckets[i]))])</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/bucket.gif" alt="gif"></p></center><h3 id="8-计数排序"><a href="#8-计数排序" class="headerlink" title="8.计数排序"></a>8.计数排序</h3><blockquote><ul><li>找出待排序的数组中最大和最小的元素；</li><li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li><li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li><li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountingSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(collection)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> collection:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># get some information about the collection</span></span><br><span class="line">        coll_len = len(collection)</span><br><span class="line">        coll_max = max(collection)</span><br><span class="line">        coll_min = min(collection)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># create the counting array</span></span><br><span class="line">        counting_arr_length = coll_max + <span class="number">1</span> - coll_min</span><br><span class="line">        counting_arr = [<span class="number">0</span>] * counting_arr_length</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># count how much a number appears in the collection</span></span><br><span class="line">        <span class="keyword">for</span> number <span class="keyword">in</span> collection:</span><br><span class="line">            counting_arr[number - coll_min] += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment"># sum each position with it's predecessors. now, counting_arr[i] tells</span></span><br><span class="line">        <span class="comment"># us how many elements &lt;= i has in the collection</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, counting_arr_length):</span><br><span class="line">            counting_arr[i] = counting_arr[i] + counting_arr[i<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># create the output collection</span></span><br><span class="line">        ordered = [<span class="number">0</span>] * coll_len</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># place the elements in the output, respecting the original order (stable</span></span><br><span class="line">        <span class="comment"># sort) from end to begin, updating counting_arr</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(<span class="number">0</span>, coll_len)):</span><br><span class="line">            ordered[counting_arr[collection[i] - coll_min]<span class="number">-1</span>] = collection[i]</span><br><span class="line">            counting_arr[collection[i] - coll_min] -= <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> ordered</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/counting.gif" alt="gif"></p></center><h3 id="9-基数排序"><a href="#9-基数排序" class="headerlink" title="9.基数排序"></a>9.基数排序</h3><blockquote><ul><li>取得数组中的最大数，并取得位数；</li><li>arr为原始数组，从最低位开始取每个位组成radix数组；</li><li>对radix进行计数排序（利用计数排序适用于小范围数的特点）；</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RadixSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span><span class="params">(lst)</span>:</span></span><br><span class="line">        RADIX = <span class="number">10</span></span><br><span class="line">        placement = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment"># get the maximum number</span></span><br><span class="line">        max_digit = max(lst)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span> placement &lt; max_digit:</span><br><span class="line">          <span class="comment"># declare and initialize buckets</span></span><br><span class="line">          buckets = [list() <span class="keyword">for</span> _ <span class="keyword">in</span> range( RADIX )]</span><br><span class="line">    </span><br><span class="line">          <span class="comment"># split lst between lists</span></span><br><span class="line">          <span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">            tmp = int((i / placement) % RADIX)</span><br><span class="line">            buckets[tmp].append(i)</span><br><span class="line">    </span><br><span class="line">          <span class="comment"># empty lists into lst array</span></span><br><span class="line">          a = <span class="number">0</span></span><br><span class="line">          <span class="keyword">for</span> b <span class="keyword">in</span> range( RADIX ):</span><br><span class="line">            buck = buckets[b]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> buck:</span><br><span class="line">              lst[a] = i</span><br><span class="line">              a += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">          <span class="comment"># move to next</span></span><br><span class="line">          placement *= RADIX</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/radix.gif" alt="gif"></p></center><pre><code>基数排序 vs 计数排序 vs 桶排序这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异:基数排序：根据键值的每位数字来分配桶；计数排序：每个桶只存储单一键值；桶排序：每个桶存储一定范围的数值；</code></pre><h3 id="10-堆排序"><a href="#10-堆排序" class="headerlink" title="10.堆排序"></a>10.堆排序</h3><blockquote><ul><li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li><li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；</li><li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heapify</span><span class="params">(unsorted, index, heap_size)</span>:</span></span><br><span class="line">        largest = index</span><br><span class="line">        left_index = <span class="number">2</span> * index + <span class="number">1</span></span><br><span class="line">        right_index = <span class="number">2</span> * index + <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> left_index &lt; heap_size <span class="keyword">and</span> unsorted[left_index] &gt; unsorted[largest]:</span><br><span class="line">            largest = left_index</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> right_index &lt; heap_size <span class="keyword">and</span> unsorted[right_index] &gt; unsorted[largest]:</span><br><span class="line">            largest = right_index</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> largest != index:</span><br><span class="line">            unsorted[largest], unsorted[index] = unsorted[index], unsorted[largest]</span><br><span class="line">            HeapSort.heapify(unsorted, largest, heap_size)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(unsorted)</span>:</span></span><br><span class="line">        n = len(unsorted)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n // <span class="number">2</span> - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            HeapSort.heapify(unsorted, i, n)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            unsorted[<span class="number">0</span>], unsorted[i] = unsorted[i], unsorted[<span class="number">0</span>]</span><br><span class="line">            HeapSort.heapify(unsorted, <span class="number">0</span>, i)</span><br><span class="line">        <span class="keyword">return</span> unsorted</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/heap.gif" alt="gif"></p></center><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><center><p><img src="./gifs/%E5%A4%8D%E6%9D%82%E5%BA%A6.png" alt="gif"></p></center>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深度/广度优先的Python实现</title>
      <link href="/2019/07/08/DFS-BFS/"/>
      <url>/2019/07/08/DFS-BFS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-BFS"><a href="#1-BFS" class="headerlink" title="1.BFS"></a>1.BFS</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    visited_queue = [start]</span><br><span class="line">    seen = set()  </span><br><span class="line">    <span class="keyword">while</span> visited_queue:</span><br><span class="line">        frontier = visited_queue.pop() </span><br><span class="line">        <span class="keyword">if</span> frontier <span class="keyword">in</span> seen: <span class="keyword">continue</span>      </span><br><span class="line">        <span class="keyword">for</span> successor <span class="keyword">in</span> graph[frontier]:</span><br><span class="line">            <span class="keyword">if</span> successor <span class="keyword">in</span> seen: <span class="keyword">continue</span></span><br><span class="line">            print(successor)           </span><br><span class="line">            visited_queue = [successor] + visited_queue</span><br><span class="line">        seen.add(frontier)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> seen</span><br></pre></td></tr></table></figure><a id="more"></a><center><p><img src="./gifs/BFS.gif" alt="bfs"></p></center><h3 id="2-DFS"><a href="#2-DFS" class="headerlink" title="2.DFS"></a>2.DFS</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dfs_seen = set()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    dfs_seen.add(start)</span><br><span class="line">    print(start)</span><br><span class="line">    <span class="keyword">if</span> len(graph[start]) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> successor <span class="keyword">in</span> graph[start]:</span><br><span class="line">        <span class="keyword">if</span> successor <span class="keyword">in</span> dfs_seen:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        dfs(graph, successor)</span><br><span class="line">    <span class="keyword">return</span> dfs_seen</span><br></pre></td></tr></table></figure><center><p><img src="./gifs/DFS.gif" alt="dfs"></p></center><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">number_graph = &#123;</span><br><span class="line">    <span class="number">1</span>: [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">2</span>: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    <span class="number">3</span>: [<span class="number">1</span>, <span class="number">6</span>],</span><br><span class="line">    <span class="number">4</span>: [<span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    <span class="number">5</span>: [<span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">    <span class="number">6</span>: [<span class="number">3</span>, <span class="number">11</span>, <span class="number">10</span>],</span><br><span class="line">    <span class="number">7</span>: [<span class="number">4</span>],</span><br><span class="line">    <span class="number">8</span>: [<span class="number">4</span>, <span class="number">12</span>],</span><br><span class="line">    <span class="number">9</span>: [<span class="number">5</span>],</span><br><span class="line">    <span class="number">10</span>: [<span class="number">6</span>],</span><br><span class="line">    <span class="number">11</span>: [<span class="number">6</span>, <span class="number">13</span>],</span><br><span class="line">    <span class="number">12</span>: [<span class="number">8</span>],</span><br><span class="line">    <span class="number">13</span>: [<span class="number">11</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(bfs(number_graph, <span class="number">1</span>))</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br><span class="line"></span><br><span class="line">print(dfs(number_graph, <span class="number">1</span>))</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python&#39;s Trick 01</title>
      <link href="/2019/07/08/Python-s-Trick/"/>
      <url>/2019/07/08/Python-s-Trick/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-Python的哈希"><a href="#1-Python的哈希" class="headerlink" title="1.Python的哈希"></a>1.Python的哈希</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#125;</span><br><span class="line">d[<span class="number">5.5</span>] = <span class="string">'hello'</span></span><br><span class="line">d[<span class="number">4</span>] = <span class="string">'world'</span></span><br><span class="line">d[<span class="number">4.0</span>] = <span class="string">'WORLD'</span></span><br><span class="line">d[<span class="number">4</span>]</span><br><span class="line">Out[<span class="number">35</span>]: <span class="string">'WORLD'</span></span><br><span class="line">d[<span class="number">4.0</span>]</span><br><span class="line">Out[<span class="number">36</span>]: <span class="string">'WORLD'</span></span><br></pre></td></tr></table></figure><blockquote><p>Python字典通过检查键值是否相等和比较哈希值来确定两个键是否相相同。具有相同值的不可变对象在Python中具有相同哈希值，当然，具有不同值的对象也可能具有相同哈希（哈希冲突）。</p></blockquote><a id="more"></a><h3 id="2-在哪儿Return"><a href="#2-在哪儿Return" class="headerlink" title="2.在哪儿Return"></a>2.在哪儿Return</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">some_func()</span><br><span class="line">Out[<span class="number">28</span>]: <span class="number">2</span></span><br><span class="line">a = some_func()</span><br><span class="line">a</span><br><span class="line">Out[<span class="number">30</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>1.不管哪种组合，<code>finally</code>中的语句都会执行；2.函数的返回值取决于最后执行的<code>return</code>。<br><a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#finally" target="_blank" rel="noopener">More about finally</a></p></blockquote><h3 id="3-你是什么类"><a href="#3-你是什么类" class="headerlink" title="3.你是什么类"></a>3.你是什么类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">TEST() == TEST()</span><br><span class="line">Out[<span class="number">38</span>]: <span class="literal">False</span></span><br><span class="line">TEST() <span class="keyword">is</span> TEST()</span><br><span class="line">Out[<span class="number">39</span>]: <span class="literal">False</span></span><br><span class="line">hash(TEST()) == hash(TEST())</span><br><span class="line">Out[<span class="number">41</span>]: <span class="literal">True</span></span><br><span class="line">id(TEST()) == id(TEST())</span><br><span class="line">Out[<span class="number">42</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>为什么<code>is</code>和<code>id()</code>的结果不一样？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TEST</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span> print(<span class="string">'created'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span> print(<span class="string">'deleted'</span>)</span><br><span class="line"></span><br><span class="line">TEST() <span class="keyword">is</span> TEST()</span><br><span class="line">created</span><br><span class="line">created</span><br><span class="line">deleted</span><br><span class="line">deleted</span><br><span class="line">Out[<span class="number">44</span>]: <span class="literal">False</span></span><br><span class="line">id(TEST()) == id(TEST())</span><br><span class="line">created</span><br><span class="line">deleted</span><br><span class="line">created</span><br><span class="line">deleted</span><br><span class="line">Out[<span class="number">45</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p><code>is</code>判断时，两边的实例同时创建，即创建了两个不同实例后才判断地址；<code>id()</code>的判断则是先创建一个实例后，调用<code>id()</code>函数后销毁；当连续两次进行<code>id()</code>调用时，Python会将相同内存地址分配给第二个对象，因此<code>id</code>相同。</p></blockquote><h3 id="4-到底是不是同一个对象"><a href="#4-到底是不是同一个对象" class="headerlink" title="4.到底是不是同一个对象"></a>4.到底是不是同一个对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple_1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple_2 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple_1 <span class="keyword">is</span> tuple_2</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string_1 = <span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string_2 = <span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string_1 <span class="keyword">is</span> string_2</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>共享<code>string literals</code>是CPython的一种优化措施，称为<code>驻留(interning)</code>，防止重复创建“热门”数字或字符串。</li><li>注意CPython不会驻留所有字符串和数字，所以不要依赖这个优化措施。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1234</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1234</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">-5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">-5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">-6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">-6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p><code>CPython</code>中的<code>small_ints</code>，其中包含了<code>[-5,...256]</code>的整型值，为了减少内存管理在处理小整型数字时的开销，<code>CPython</code>在解释器中使用了<code>小整数对象池</code>进行优化，即如创建处于这个区间内的整型值，变量将指向内存中的同一个地址的对象。在这个区间之外的数则是不同的对象。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一个模型 -- 线性回归</title>
      <link href="/2019/07/07/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9E%8B-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
      <url>/2019/07/07/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9E%8B-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="预测房子的价格"><a href="#预测房子的价格" class="headerlink" title="预测房子的价格"></a>预测房子的价格</h2><h3 id="1-第一个问题-–-回归模型"><a href="#1-第一个问题-–-回归模型" class="headerlink" title="1.第一个问题 – 回归模型"></a>1.第一个问题 – 回归模型</h3><p>首先你可能需要一些房子案例资料，并简单的根据房子大小和房价做出简单的一个模型（咱们假如房价只和房子面积有关），这个简单的模型可能长这样：</p><a id="more"></a><center><p><img src="./pics/%E9%9D%A2%E7%A7%AF-%E6%88%BF%E4%BB%B7%E8%B6%8B%E5%8A%BF%E5%9B%BE.png" alt="面积-房价趋势图"></p></center><p>我们现在要做的，就是根据已知的图来画出一条线，然后<strong>尽量贴合</strong>已知的数据，因为这样预测出来的结果有可能更加准确。简单的线性回归方程长这样：</p><p>$$h_{\theta}(x) = {\theta}_0 + {\theta}_1x$$</p><p>或者你也可以写成更熟悉的样子：</p><p>$$ y = kx + b $$</p><p>画上去可能长这样：</p><center><p><img src="./pics/%E9%9D%A2%E7%A7%AF-%E6%88%BF%E4%BB%B7%E8%B6%8B%E5%8A%BF%E5%9B%BE2.png" alt="面积-房价趋势图"></p></center><h3 id="2-如何选出最佳函数-–-代价函数"><a href="#2-如何选出最佳函数-–-代价函数" class="headerlink" title="2.如何选出最佳函数 – 代价函数"></a>2.如何选出最佳函数 – 代价函数</h3><p>为了简化 $J$ 的推导过程，此处假设 $\theta_0$ 为0，因此函数是一条通过原点的直线。</p><p>$$ J(\theta_0, \theta_1) = \frac{\sum_{i=1}^m(h_\theta(x^{(i)}) - y^{(i)})^2}{2m} $$</p><h3 id="3-最佳函数-–-目标函数"><a href="#3-最佳函数-–-目标函数" class="headerlink" title="3.最佳函数 – 目标函数"></a>3.最佳函数 – 目标函数</h3><p>代价函数最小值对应的 $\theta_1$ 函数为目标函数，即最贴合已知数据的一条拟合线。</p><h3 id="4-寻找最优解释方法一-–-梯度下降"><a href="#4-寻找最优解释方法一-–-梯度下降" class="headerlink" title="4.寻找最优解释方法一  – 梯度下降"></a>4.寻找最优解释方法一  – 梯度下降</h3><p>下图深蓝色的地方均是一个合适的参数组合，称为局部最优解。<br><strong>注意：线性回归方程的代价函数为凸函数，存在一个全局最优解，而没有局部最优解。</strong></p><center><p><img src="./pics/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D.png" alt="梯度下降"></p></center>梯度下降的公式如下：<center><p><img src="./pics/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D_2.png" alt="梯度下降"></p></center>工作原理：<center><p><img src="./pics/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="梯度下降工作原理"></p></center>其中，$\alpha$是一个为正数的学习速率，大小将决定函数收敛的结果：<p>$$\theta _{1}=\theta _{1}-\alpha \dfrac {\partial J\left( \theta _{1}\right) }{\partial \theta _{1}}$$</p><p>导数部分为代价函数在$\theta_1$处的斜率，当$\theta_1$在最优解（斜率为0处）右边时，斜率为正，因此每次迭代的结果$\theta_1$都会减小；反之，当$\theta_1$在最优解左边时，斜率为负，每次迭代$\theta_1$都会增大。这两种情况的迭代均会使得$\theta_1$不断靠近最优解。而学习速率$\alpha$的选择，则会决定迭代的次数以及迭代的结果：</p><center><p><img src="./pics/%E5%AD%A6%E4%B9%A0%E9%80%9F%E7%8E%87.png" alt="学习速率"></p></center>1.当$\alpha$很小时，每次迭代的结果是参数变化很小，因此导致迭代的次数变多，但是最终将会得到一个最优解；<p>2.当$\alpha$很大时，在靠近最优解时，因为$\alpha$很大，所以下一次的迭代很可能错过最优解，最终可能导致迭代在最优解左右两边取值，甚至无法收敛而发散。</p><p>3.那么是否需要在每次迭代的同时，取不同的$\alpha$呢？答案是不需要：</p><center><p><img src="./pics/%E5%AD%A6%E4%B9%A0%E9%80%9F%E7%8E%872.png" alt="学习速率2"></p></center>因为每次迭代后，与$\alpha$相乘的偏导数部分都会变小（对于偏导数为负情况，与$\theta_1$相加的部分每次同样都更小），即<p>$$\alpha \dfrac {\partial }{\partial \theta }J_{1}\left( \theta _{1}\right) $$<br>部分每次都变小，因此随着迭代的进行，梯度下降每次将自动减小下降速率，而$\alpha$则不需要跟随迭代变化。</p><p>4.如果$\theta_1$一开始就在最优解处，则每次迭代后$\theta_1$都不会变化，因为偏导数结果为0。</p><center><p><img src="./pics/%E5%B1%80%E9%83%A8%E6%9C%80%E4%BC%98%E8%A7%A3.png" alt="局部最优解"></p></center><h3 id="5-结合代价函数的梯度下降应用"><a href="#5-结合代价函数的梯度下降应用" class="headerlink" title="5.结合代价函数的梯度下降应用"></a>5.结合代价函数的梯度下降应用</h3><p>将线性回归的代价函数进行偏微分计算后得到（注意$\theta_0$，$\theta_1$均为常数系数）得到：</p><center><p><img src="./pics/%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B0%E7%9A%84%E5%81%8F%E5%AF%BC%E6%95%B0.png" alt="代价函数的偏导数"></p></center>因此对于线性回归方程，其最优参数组合的求解如下：<center><p><img src="./pics/%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3.png" alt="线性方程的最优解"></p></center><h3 id="6-寻找最优解的方法二：正规方程组解法"><a href="#6-寻找最优解的方法二：正规方程组解法" class="headerlink" title="6.寻找最优解的方法二：正规方程组解法"></a>6.寻找最优解的方法二：正规方程组解法</h3>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python判断机制</title>
      <link href="/2019/07/07/Python%E5%88%A4%E6%96%AD%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/07/07/Python%E5%88%A4%E6%96%AD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-Python判空"><a href="#1-Python判空" class="headerlink" title="1.Python判空"></a>1.Python判空</h3><p>调用对象的<code>__bool__</code>函数，若不存在该方法，则调用<code>__len__</code>方法，返回0为空，否则为1.如果某类对象没有定义这两种方法，则该类实例化的任何实例判断时均为真。</p><h3 id="2-Python判等"><a href="#2-Python判等" class="headerlink" title="2.Python判等"></a>2.Python判等</h3><h3 id="2-1-is和-的区别"><a href="#2-1-is和-的区别" class="headerlink" title="2.1 is和==的区别"></a>2.1 <code>is</code>和<code>==</code>的区别</h3><p><code>is</code>根据对象的内存地址判断是否为同一个对象，即调用<code>id()</code>后的地址，如果一致则返回真。</p><p><code>==</code>调用对象的<code>__eq__</code>方法来判断两个对象是否相等，具体返回结果取决于该方法的具体实现。</p><a id="more"></a><h3 id="2-2-变量不是对象"><a href="#2-2-变量不是对象" class="headerlink" title="2.2 变量不是对象"></a>2.2 变量不是对象</h3><p>Python中，变量名应该理解成对象的标注，而不是对象的盒子。对象是先于变量存在的，即当我们做这样的赋值时：<code>a = 123</code>，python先创造出<code>123</code>整型对象后，才绑定给左边的<code>a</code>变量，而这个对象是可以绑定给多个变量的，比如<code>b,c,d</code>等。再举个深入跟类相关的例子，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f"Test's id is <span class="subst">&#123;id(self)&#125;</span>"</span>)</span><br><span class="line">        </span><br><span class="line">x = Test()</span><br><span class="line">y = Test() + <span class="number">2</span></span><br></pre></td></tr></table></figure><p>此处我们每次实例化一个Test对象，都会打印对应的实例地址，<code>x,y</code>两次调用都会打印地址，但是第二次打印后将会报错，因为<code>Test</code>类并没有实现<code>__add__</code>方法。可以看出，不管等号左边是什么名称的变量，python都只会在创造该对象后才将其绑定给左边的变量。</p><h3 id="2-3-可变数据结构和不可变数据结构赋值时的区别"><a href="#2-3-可变数据结构和不可变数据结构赋值时的区别" class="headerlink" title="2.3 可变数据结构和不可变数据结构赋值时的区别"></a>2.3 可变数据结构和不可变数据结构赋值时的区别</h3><p>对于可变的数据结构，同时赋值两个空的对象id是不一样的，如两个空列表/空字典/空元组：<code>a is b</code>为假。</p><p>对于不可变的数据结构，同时赋值两个空洞的对象，其id是一样的，如两个空集合/空字符串：<code>a is b</code>为真。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">a <span class="keyword">is</span> b</span><br><span class="line">Out[<span class="number">4</span>]: <span class="literal">True</span></span><br><span class="line">a == b</span><br><span class="line">Out[<span class="number">5</span>]: <span class="literal">True</span></span><br><span class="line">c = []</span><br><span class="line">d = []</span><br><span class="line">c <span class="keyword">is</span> d</span><br><span class="line">Out[<span class="number">8</span>]: <span class="literal">False</span></span><br><span class="line">c == d</span><br><span class="line">Out[<span class="number">9</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
